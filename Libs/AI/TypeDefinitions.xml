<?xml version="1.0" encoding="utf-8"?>
<TypeDefinitions version="1">



	<Type name="sensation">

		<Type name="vision">
			<Member name="Who" type="common:wuid" />
			<Member name="Status" type="bool">false</Member>
			<Member name="ReferencePoint" type="int">0</Member>
			<Member name="Distance" type="float">0.0</Member>
		</Type>

		<Type name="sound">
			<Member name="Source" type="common:wuid" />
			<Member name="Location" type="common:vec3" />
			<Member name="Type" type="int">0</Member>
			<Member name="TypeDescription" type="string">none</Member>

			<Type name="clear"/>
			<Type name="audible"/>
			<Type name="detectable"/>
		</Type>
	</Type>

	<Type name="percept">

		<Type name="person">
			<Member name="EntityID" type="common:wuid" />
			<Member name="Visible" type="bool" />

			<Type name="unknown" />
			<Type name="friendly" />
			<Type name="enemy" />
			<Type name="neutral" />
		</Type>

		<Type name="object">
			<Member name="EntityID" type="common:wuid" />
		</Type>

	</Type>


	<Type name="quat">

		<Member name="x" type="float" />
		<Member name="y" type="float" />
		<Member name="z" type="float" />
		<Member name="w" type="float" />

	</Type>


	<Type name="extraSignalData">
		<Member name="point" type="common:vec3" />
		<Member name="point2" type="common:vec3" />
		<Member name="nId" type="int">0</Member>
		<Member name="fValue" type="float">0.0</Member>
		<Member name="iValue" type="int">0</Member>
		<Member name="iValue2" type="int">0</Member>
		<Member name="string" type="string" />
		<Member name="string2" type="string" />
	</Type>
	<!--
<Type name="CryEngine">
	<Type name="Signal">
		<Member name="Sender" type="common:EntityId">0</Member>
		<Member name="Name" type="string">Signal</Member>
		<Member name="ExtraData" type="ExtraSignalData"/>
		<Member name="CRC" type="int">0</Member>
	</Type>

</Type>
-->


	<Type name="moveParams">
		<!-- bug KCD-18954 -->
		<!-- <Member name="additionalMoveParams" type="additionalMoveParams"></Member>
	<Member name="pathFindingParams" type="pathFindingParams"></Member>
	<Member name="staminaPolicy" type="staminaPolicy"></Member> -->
		<Member name="stopWithinDistance" type="float">0.2</Member>
		<Member name="stopDistanceVariation" type="float">0.1</Member>
		<Member name="rayCastedFlee" type="bool">true</Member>
		<Member name="successDistance" type="float">0.0</Member>
	</Type>


	<!--****************************** CALLBACK ***********************************-->

	<Type name="callback">
		<Member name="file" type="string" />		<!-- for IncludeTree -->
		<Member name="tree" type="string" />		<!-- for IncludeTree -->
		<Member name="host" type="common:wuid" />	<!-- for CallBehavior -->
		<Member name="behavior" type="string" />	<!-- for CallBehavior -->
	</Type>

	<!--****************************** ANIMATION ***********************************-->

	<Type name="animation">
		<Member name="name" type="string" />
		<Member name="tags" type="string" />
		<Member name="waitForEnd" type="bool" />
	</Type>

	<!--****************************** BEHAVIOR HANDLING DEFINITIONS *******************************-->

	<Type name="homeBehavior">
		<Member name="name" type="string" />
		<Member name="isAlternative" type="bool">false</Member>
	</Type>

	<Type name="behaviorRequest">
		<Member name="areaId" type="common:wuid" />
		<Member name="behaviorName" type="string" />
		<Member name="requestedName" type="string" />
	</Type>

	<Type name="behaviorState">
		<Member name="behaviorName" type="string" />
		<Member name="enable" type="bool" />
		<!-- change to enum -->
	</Type>

	<!--****************************** HIT REACTION  ***********************************-->

	<Type name="hitReaction">
		<Member name="attacker" type="common:wuid" />
		<Member name="hitStrength" type="enum:HitReactionStrength" />
		<!-- type HitReactionStrength -->
		<Member name="hitType" type="enum:HitReactionType" />
		<!-- type HitReactionType -->
		<Member name="targetOrigMat" type="int" />
		<!-- was added for testing purpouse,
				if this value == -1 then hit was blocked by sword -->
	</Type>

	<!--************************* DROP CARRIED BODY NOTIFICATION ***********************************-->

	<Type name="carriedBodyDrop">
		<Member name="body" type="common:wuid" />
	</Type>

	<!--****************************** STEALTH KILL  ***********************************-->

	<!-- Sent to the stealth kill victim when the stealth kill action fails. -->
	<Type name="stealthKillFail">
		<Member name="attacker" type="common:wuid" />
	</Type>

	<!-- Sent to the stealth kill victim when the stealth kill action succeeds. -->
	<Type name="stealthKillSuccess">
		<Member name="attacker" type="common:wuid" />
	</Type>

	<!--************************* unconscious state  ***********************************-->

	<Enum name="UnconsciousReason">
		<!-- These correspond to the C++ enum => weird values -->
		<Unknown value="0" />
		<Knockout value="1" />
		<Alcohol value="2" />
	</Enum>

	<Type name="unconsciousState">
		<Member name="unconscious" type="float" />
		<Member name="reason" type="enum:UnconsciousReason" />
	</Type>

	<!--****************************** mv'S TYPE DEFINITIONS  ***********************************-->

	<Enum name="missileCombatInfo">
		<unreachable />
		<notLoaded />
		<lowStamina />
		<unexpectedLaunch />
		<unknown />
	</Enum>

	<Enum name="combatOrderType">
		<wait />
		<attack />
		<die />		
		<defend />
		<flee />
		<move />
		<reset />
		<shoot />
		<bark />	
		<special />
	</Enum>

	<Enum name="grateState">
		<undefined value="0"/>
		<open />
		<closed />
		<opening />
		<closing />
	</Enum>

	<Type name="gateOpenRequest">
		<member name="gate" type="common:wuid"/>
		<member name="goingIn" type="bool"/>
		<member name="instant" type="bool">false</member>
	</Type>

	<Type name="landRemoveRequest">
		<member name="id" type="common:wuid"/>
		<member name="reason" type="string"/>
	</Type>

	<Type name="trespassRelation">
		<member name="nasty" type="float">0.1</member>
		<member name="neutral" type="float">0.25</member>
		<member name="friendly" type="float">0.45</member>
		<member name="loved" type="float">0.9</member>
	</Type>

	<Type name="battle">
		<Type name="singleOrder">
			<Member name="command" type="string" />
			<Member name="sequence" type="int" />
			<Member name="target" type="common:wuid" />
		</Type>
		<Type name="additionals">
			<Member name="attackInFormation" type="bool" />			<!-- keeps formation when attacks, only for attack command -->
			<Member name="keepFormation" type="bool">true</Member>	<!-- keeps formation after move -->
			<Member name="moveSpeed" type="string" />				<!-- movement speed of unit / formation -->
			<Member name="block" type="bool" />						<!-- block during command -->
			<Member name="guard" type="bool" />						<!-- guard during command -->
			<Member name="noRally" type="bool" />
			<Member name="onlyRally" type="bool" />
			<Member name="behavior" type="string" />			
			<Member name="barkLeaderOnly" type="bool" >true</Member>
			<Member name="barkUseAlias" type="bool" >true</Member>
			<Member name="bark" type="string" />					<!-- alias or metarole -->
			<Member name="teleport" type="bool" />					<!-- teleport to destination in formation-->
			<Member name="guardRally" type="bool" />
			<Member name="guardAfterMove" type="bool" />			<!-- after moves stays in guard until next command-->
			<Member name="dialogTarget" type="common:wuid" />
			<Member name="precisePosition" type="bool" />			<!-- when moving in 'spread' version turnbody to the tagpoint as well -->
			<Member name="attackPlayer" type="bool" />				<!-- attack player while performing shooting command -->
			<Member name="stationaryPosition" type="bool" />		<!-- when shooting will not move even after no arrows -->
			<Member name="ignoreObstacles" type="bool">true</Member><!-- when shooting will shoot regardles of obstacles -->
			<Member name="hideOnDeath" type="bool"/>				<!-- if killed by die command what to do with corpse -->
		</Type>
		<Type name="unitRegister">
			<Member name="id" type="common:wuid" />
			<Member name="leader" type="common:wuid" />
			<Member name="position" type="int" />
			<Member name="total" type="int" />
			<Member name="master" type="common:wuid" />
		</Type>
		<Type name="command">
			<Member name="type" type="enum:combatOrderType" />
			<Member name="id" type="int">-1</Member>
			<Member name="adds" type="battle:additionals" />
			<Member name="target" type="common:wuid" />
			<Member name="immediate" type="bool">true</Member>
			<Member name="synchro" type="string" />
			<Member name="synchroLockCount" type="int">1</Member>
			<Member name="formationSize" type="int" />
		</Type>
		<Type name="resolved">
			<Member name="command" type="battle:command" />
		</Type>
		<Type name="partialResolved">
			<Member name="command" type="battle:command" />
		</Type>
		<Type name="duelRequest">
			<Member name="id" type="common:wuid" />
		</Type>
		<Type name="setup">
			<Member name="kill" type="int" />  						<!-- in percentage -->
			<Member name="hideOnDeath" type="bool">true</Member>
			<Member name="buff" type="int" />						<!-- in percentage, negative wmeans removing buff-->
			<Member name="buffId" type="string" />
			<Member name="arrows" type="int" />						<!-- in percentage -->
		</Type>
	</Type>

	<Type name="combatShooting">
		<Type name="synchronisation">
			<Member name="do" type="bool" />
			<Member name="maxCount" type="int" />
			<Member name="lockWuid" type="common:wuid" />
			<Member name="notify" type="common:wuid" />
		</Type>
		<Type name="signal">
		</Type>
	</Type>

	<Type name="includeTree">
		<Member name="file" type="string" />
		<Member name="name" type="string" />
	</Type>

	<Type name="formation">
		<Type name="movementTarget">
			<Member name="position" type="common:vec3" />
			<Member name="rotation" type="common:vec3" />
		</Type>
		<Type name="addMember">
			<Member name="id" type="common:wuid" />
		</Type>
		<Type name="removeMember">
			<Member name="id" type="common:wuid" />
		</Type>
		<Type name="movementPath">
			<Member name="id" type="common:wuid" />
			<Member name="prepare" type="bool" />
		</Type>
		<Type name="formationPosition">
			<Member name="mine" type="int" />
			<Member name="total" type="int" />
		</Type>
	</Type>

	<Type name="formation_params">
		<Member name="id" type="string" />
		<Member name="destination" type="common:wuid" />
	</Type>
	
	<Type name="formationData">
		<Member name="leader" type="common:wuid" />
		<Member name="type" type="string" />
		<Member name="preferedPosition" type="string" />
		<Member name="policy" type="enum:relocationPolicy">$enum:relocationPolicy.RelaxedFollow</Member>
		<Member name="speedLimit" type="enum:movementSpeed">$enum:movementSpeed.dash</Member>
	</Type>

	<Type name="animal">
		<Type name="despawnRequest">
			<Member name="killed" type="bool" />
		</Type>
		<Type name="playerIn">
			<Member name="param" type="bool" />
		</Type>
		<Type name="playerOut">
			<Member name="param" type="bool" />
		</Type>
		<Type name="spawnParameters">
			<member name="amount" type="int"/>
			<member name="class" type="string"/>
			<member name="radius" type="float"/>
			<member name="respawn" type="string"/>
		</Type>
		<Type name="behaviorParameters">
			<Member name="true" type="bool" />
		</Type>
	</Type>


	<Type name="lod">
		<Member name="enable" type="bool" />
	</Type>

	<Type name="hitData">
		<Member name="target" type="common:wuid" />
		<Member name="projectile" type="common:wuid" />
		<Member name="offset" type="common:vec3" />
		<Member name="isStabbed" type="bool" />
	</Type>

	<Type name="hitDataSubscription">
		<Type name="request">
			<Member name="unsubscribe" type="bool" />
			<Member name="callback" type="common:wuid" />
			<Member name="once" type="bool" />
			<Member name="target" type="common:wuid" />
		</Type>
		<Type name="event">
			<Member name="target" type="common:wuid" />
			<Member name="projectile" type="common:wuid" />
			<Member name="offset" type="common:vec3" />
			<Member name="isStabbed" type="bool" />
		</Type>
	</Type>

	<Type name="archery">
		<Type name="floatingScore">
			<Member name="player" type="int" />
			<Member name="left" type="int" />
			<Member name="right" type="int" />
		</Type>
		<Type name="shootingTargetData">
			<Member name="transform" type="common:transform" />
			<Member name="active" type="bool" />
			<Member name="value" type="int" />
		</Type>
		<Type name="register">
			<member name="game" type="string" />
			<member name="mode" type="int" />
		</Type>
		<Type name="forward">
			<member name="id" type="common:wuid" />
			<member name="behavior" type="string" />
		</Type>
		<Type name="position">
			<member name="id" type="common:wuid" />
			<member name="arrows" type="int" />
		</Type>
		<Type name="start">
			<member name="state" type="bool" />
			<member name="arrows" type="int" />
		</Type>
		<Type name="winner">
			<member name="id" type="common:wuid" />
		</Type>
		<Type name="playerScore">
			<member name="score" type="int" />
		</Type>
		<Type name="end">
			<member name="score" type="int" />
			<member name="position" type="int" />
		</Type>
		<Type name="targetRequest">
			<member name="value" type="int" />
			<member name="id" type="common:wuid" />
			<member name="transform" type="common:transform" />
		</Type>
		<Type name="score">
			<member name="target" type="common:wuid" />
			<member name="score" type="int" />
			<member name="phase" type="string" />
			<member name="arrows" type="int" />
			<member name="arrowsInQuiver" type="int" />
		</Type>
		<Type name="setup">
			<member name="skillOfDummyMin" type="float">8.0</member>
			<member name="skillOfDummyRandomAdd" type="float">4.0</member>
			<member name="mode" type="string" />
			<member name="opponents" type="int" />
			<member name="arrows" type="int" />
			<member name="reporter" type="common:wuid" />
		</Type>
		<Type name="minigameState">
			<member name="state" type="enum:archeryMinigameState" />
			<member name="participant" type="common:wuid" />
		</Type>
		<Type name="targetRegister">
			<member name="profileName" type="string" />
			<member name="radius" type="float">10</member>
		</Type>
		<Type name="participant">
			<member name="id" type="common:wuid" />
			<member name="finished" type="bool">false</member>
		</Type>
		<Type name="numberOpponents">
			<member name="numberOpponents" type="int" />
		</Type>
		<Type name="archerSetup">
			<member name="tagpoint" type="common:wuid" />
			<member name="arrows" type="int" />
		</Type>

	</Type>

	<Enum name="archeryMinigameState">
		<prepareToStart value="1" />
		<start />
		<finishedPlayerWon />
		<finishedPlayerLost />
		<finishedAborted />
		<participantFinished />
		<timeIsRunningOut />
		<timeIsUp />
	</Enum>

	<Type name="fightClub">
		<Type name="settings">
			<member name="betFighter1" type="int"/>
			<member name="betFighter2" type="int"/>
			<member name="betFighter3" type="int"/>
			<member name="betFighter4" type="int"/>
			<member name="winFirstTimeFighter1" type="int"/>
			<member name="winFirstTimeFighter2" type="int"/>
			<member name="winFirstTimeFighter3" type="int"/>
			<member name="winFirstTimeFighter4" type="int"/>
			<member name="winSecondTimeFighter1" type="int"/>
			<member name="winSecondTimeFighter2" type="int"/>
			<member name="winSecondTimeFighter3" type="int"/>
			<member name="winSecondTimeFighter4" type="int"/>
		</Type>
	</Type>


	<Enum name="playerActionEvent">
		<all value="0"/>
		<sitDown />
		<standUp_sit />
		<lieDown />
		<standUp_lie />
		<mountHorse />
		<dismountHorse />
		<possessHorse />
	</Enum>

	<Type name="sam">
		<Type name="data">
			<member name="name" type="string" />
			<member name="state" type="string" />
			<member name="count" type="int" />
			<member name="limit" type="int" />
		</Type>
		<Type name="change">
			<member name="id" type="common:wuid" />
			<member name="name" type="string" />
			<member name="op" type="int" />
		</Type>
		<Type name="confirm">
			<member name="allow" type="bool" />
		</Type>
		<Type name="interpret">
			<member name="target" type="common:wuid" />
			<member name="behavior" type="string" />
		</Type>
	</Type>

	<Type name="collier">
		<Type name="kiln">
			<Type name="getPhase">
				<member name="get" type="bool">true</member>
				<member name="phase" type="int" />
			</Type>
			<Type name="forcePhase">
				<member name="phase" type="int" />
			</Type>
			<Type name="changePhase">
				<member name="forcedPhase" type="bool">false</member>
			</Type>
			<Type name="phaseTimer">
				<member name="start" type="bool">true</member>
			</Type>
			<Type name="getDirector">
				<member name="director" type="common:wuid" />
			</Type>
		</Type>
		<Type name="director">
			<Type name="requestWorkPlace">
				<member name="request" type="bool">true</member>
			</Type>
			<Type name="requestResult">
				<member name="rejected" type="bool">true</member>
			</Type>
			<Type name="kilnReleased">
				<member name="signalIsFromKiln" type="bool">false</member>
			</Type>
			<Type name="kilnPhaseChanged">
				<member name="phase" type="int" />
			</Type>
		</Type>
	</Type>

	<Enum name="collierWorkMode">
		<undef value="0" />
		<freetime />
		<checkLook />
		<shovelWork />
	</Enum>

	<Type name="tannery">
		<Type name="update">
			<member name="state" type="int" />
		</Type>
		<Type name="request">
			<member name="in" type="bool" />
		</Type>
	</Type>

	<Type name="bed">
		<member name="canSleep" type="bool" />
		<member name="isInjured" type="bool" />
		<member name="isHungry" type="bool" />
		<member name="isOverSlept" type="bool" />
		<member name="isInCombat" type="bool" />
		<member name="isTimePaused" type="bool" />
	</Type>

	<Enum name="bedType">
		<bench />
		<ground />
		<normal />
		<shelter />
		<tent />
	</Enum>

	<Type name="ladder">
		<Type name="onRequest"/>
	</Type>

	<Type name="door">
		<Type name="close">
			<member name="close" type="bool" />
		</Type>
		<Type name="left">
			<member name="id" type="common:wuid" />
		</Type>
		<Type name="entry">
			<member name="FrontId" type="int" />
			<member name="BackId" type="int" />
			<member name="AnimId" type="int" />
		</Type>
		<Type name="player">
			<member name="inside" type="bool" />
		</Type>
		<Type name="onLock">
			<member name="inside" type="bool" />
		</Type>
		<Type name="queue">
			<member name="id" type="common:wuid" />
			<member name="key" type="bool" />
			<member name="type" type="string" />
			<member name="inside" type="bool" /> <!-- rename to: isLeaving (isGoingFromInside) -->
			<member name="leaving" type="bool" >false</member>
		</Type>
		<Type name="info">
			<member name="type" type="string" />
			<member name="key" type="string" />
			<member name="reverse" type="int" />
			<member name="right" type="bool" />
		</Type>
		<Type name="wait">
			<member name="place" type="int" />
		</Type>
		<Type name="endAnim">
			<member name="done" type="bool" />
		</Type>
		<Type name="onOpenOnClose">
			<member name="action" type="string"/>
		</Type>
		
		<Type name="params">
			<Member name="keepOpen" type="bool">false</Member>
		</Type>
	</Type>


	<Enum name="gateWing">
		<left />
		<right />
	</Enum>

	<Enum name="gateDirection">
		<front />
		<back />
	</Enum>

	<Enum name="gateAction">
		<open />
		<close />
	</Enum>

	<Enum name="gateSize">
		<small />
		<large />
	</Enum>

	<Type name="gate">
		<Type name="animationHandler">
			<member name="wing" type="enum:gateWing">$enum:gateWing.right</member>
			<member name="direction" type="enum:gateDirection">$enum:gateDirection.front</member>
			<member name="action" type="enum:gateAction">$enum:gateAction.open</member>
			<member name="size" type="enum:gateSize">$enum:gateSize.small</member>
			<member name="gender" type="enum:gender">$enum:gender.male</member>
		</Type>
	</Type>

	<Type name="horserace">
		<Type name="waypoint">
			<member name="id" type="common:wuid" />
		</Type>
		<Type name="start">
			<member name="start" type="_bool" />
		</Type>
	</Type>

	<Type name="shootPos">
		<member name="id" type="common:wuid" />
		<member name="free" type="bool" />
		<member name="user" type="common:wuid" />
	</Type>

	<Enum name="playerSittingAction">
		<!-- can be sent when sitting -->
		<sittingToLay />
		<sittingToEnd />

		<!-- can be sent when lying -->
		<lyingToSit />
		<lyingToEnd />

		<!-- can be sent anytime -->
		<prepareForSittingDialog />
		<prepareForStandingDialog />
		<endImmediately />

		<!-- starting transitions -->
		<startToSit/>
		<startToLay/>

	</Enum>

	<Enum name="playerSurrenderSubscriptionReason">

		<unknown />

		<!-- We're fighting the player in an openworld fight -->
		<combat />

		<!-- A soldier is about to force a dialog on the player -->
		<crime />

		<!-- Player is ambushed and prompted to surrender, which forces a dialog on player -->
		<ambush />

		<!-- NPCs prompts dude to submit to a frisk -->
		<frisk />

		<tutorial />

	</Enum>

	<!-- Player tree types -->
	<Type name="player">

		<Type name="surrender">
			<member name="forced" type="bool">false</member>
		</Type>

		<Type name="entry">
			<member name="op" type="int" />
		</Type>

		<Type name="exit">
			<member name="op" type="int" />
		</Type>

		<Type name="request">
			<member name="target" type="common:wuid" />
			<member name="mode" type="string" />
			<member name="behavior" type="string" />
			<member name="persistent" type="bool">true</member>
			<member name="instant" type="bool">false</member>
			
			<member name="release" type="bool">false</member>
			<member name="onInteractive" type="bool">true</member>		
		</Type>

		<Type name="release">
			<member name="target" type="common:wuid" />
			<member name="mode" type="string" />  		<!-- referenced from code -->
			<member name="behavior" type="string" />  <!-- referenced from code -->
			<member name="instant" type="bool">false</member>
		</Type>

		<Type name="getUsableMessage" />

		<Type name="sittingAction">
			<member name="action" type="enum:playerSittingAction" />
            <member name="interrupter" type="common:wuid" />
            <member name="internal" type="bool">false</member> <!-- true if sent from script -->
		</Type>

		<Type name="ack">
			<member name="ack" type="bool" />
		</Type>

		<Type name="companion">
			<member name="hold" type="bool" />
		</Type>

		<Type name="pickUp">
			<member name="item" type="common:wuid" />
			<member name="hand" type="int" />
		</Type>

		<Type name="place">
			<member name="item" type="common:wuid" />
			<member name="slot" type="common:wuid" />
			<member name="hand" type="string">Right</member>
			<member name="confirmation" type="bool">false</member>
		</Type>

		<Type name="placeConfirmation">
			<member name="state" type="bool" />
			<member name="item" type="common:wuid" />
		</Type>

		<Type name="drawWeapon">
			<member name="set" type="int" />
		</Type>

		<Type name="drawTorch">
			<member name="item" type="common:wuid" />
		</Type>

		<Type name="holsterWeapon">
			<member name="instantHolster" type="bool">false</member>
			<member name="keepHalberd" type="bool">false</member>
		</Type>

		<Type name="stealthKill">
			<member name="victim" type="common:wuid" />
		</Type>

		<Type name="stopAnimation">
		</Type>

		<Type name="attackDenied">
			<member name="victim" type="common:wuid" />
		</Type>

		<Type name="lambda">
			<member name="callback" type="callback" />
		</Type>

		<Type name="action">
			<Type name="subscription">

				<Type name="request">
					<Member name="unsubscribe" type="bool">false</Member>

					<Member name="once" type="bool">false</Member>
					<Member name="callback" type="common:wuid" />
					<Member name="event" type="enum:playerActionEvent" />
				</Type>

				<Type name="subscription">
					<Member name="once" type="bool">false</Member>
					<Member name="callback" type="common:wuid" />
					<Member name="event" type="enum:playerActionEvent" />
				</Type>

				<Type name="event">
					<member name="target" type="common:wuid" />
					<Member name="event" type="enum:playerActionEvent" />
				</Type>

			</Type>
		</Type>

		<Type name="arrowTouchdownVolumes">
			<Type name="suppress">
				<Member name="suppress" type="bool" />
			</Type>
		</Type>

		<Type name="formation">
			<Type name="request">
				<Member name="create" type="bool">false</Member>
				<Member name="name" type="string"/>
			</Type>
		</Type>

		<Type name="standDownAllDudeThreats">

			<Type name="request">

				<Member name="enable" type="bool" />

			</Type>

		</Type>

		<Type name="preventCombatRequest">
		
			<Member name="reason" type="enum:playerPreventCombatReason" />
			<Member name="active" type="bool" />	
		  
		</Type>
		
		<Type name="interruptSleepSkipTimeAndFaintRequest">
		
			<Member name="_" type="bool" />
		
		</Type>
    
	</Type>

	<Type name="forceLook">
		<Member name="turnOn" type="bool">true</Member>
		<Member name="target" type="common:wuid" />
	</Type>

	<Type name="companion">
		<Type name="fetch">
			<member name="id" type="common:wuid" />
		</Type>
		<Type name="attack">
			<member name="id" type="common:wuid" />
		</Type>
		<Type name="goTo">
			<member name="position" type="common:vec3" />
		</Type>
		<Type name="follow">
			<member name="nop" type="bool" />
		</Type>

	</Type>


	<Type name="distanceMove_params">
		<member name="speed" type="enum:movementSpeed">$enum:movementSpeed.walk</member>
		<member name="autospeed" type="bool">false</member>
		
		<member name="exact" type="bool">false</member>
		<member name="optional1" type="bool" />
		<member name="distance" type="float">0.2</member>
		<member name="variation" type="float">0.1</member>
		<member name="successDist" type="float">5</member>
		<member name="fixedPosition" type="bool">false</member>
		
		<member name="light_minDistance" type="float">30.0</member>
		<member name="checkTC" type="bool">true</member>
		<member name="dismountOnArrive" type="bool">true</member>
		<member name="movementTargetType" type="enum:movementTargetType"/>

		<member name="forceUseHorse" type="bool">false</member>
		<member name="useSituations" type="bool">true</member>
		<member name="useGreeting" type="bool">true</member>
		<member name="useLight" type="bool">true</member>

		<member name="useProgressiveHorseSpeed" type="bool">true</member>
		<!-- enum movementTargetType -->
		<Type name="wuid">
			<member name="target" type="common:wuid" />
			<member name="outsideAreaOnly" type="bool">false</member>
		</Type>
		<Type name="vec3">
			<member name="target" type="common:vec3" />
		</Type>
	</Type>

	<Enum name="movementTargetType">
		<wuid />
		<vec3 />
		<path />
	</Enum>

	<!--****************************** DAYCYCLE  ***********************************-->

	<Enum name="daycycleState">

		<init value="0" />

		<death />
		<interrupt />
		<standard />
		<standardFadeOut />
		<unconscious />
		<upcall />

	</Enum>

	<Enum name="daycycleHaltReason">

		<unknown value="0" />

		<combat />
		<death />
		<interrupt />
		<situation />

	</Enum>

	<Enum name="daycycleHaltSpeed">

		<slow value="0" />
		<fast value="1"/>
		<instant value="2"/>

	</Enum>

	<Enum name="blacksmithApprenticeTask">
		<furnaceFire/>
		<sharpening/>
		<anvil/>
		<sweeping/>
		<chopWood/>
	</Enum>
	
	<Type name="changeClothes">
		<Member name="clothesType" type="string">any</Member>
		<Member name="weaponType" type="string">any</Member>
		
		<Member name="createIfNotFound" type="bool">false</Member>
		<Member name="instantEquip" type="bool">false</Member>
		<Member name="goShopIfNotFound" type="bool">false</Member>
		<Member name="createIfCannotShop" type="bool">false</Member>

		<Member name="movementSpeed" type="enum:movementSpeed">$enum:movementSpeed.walk</Member>
		
		<!--	Used only in teleport behaviors	-->
		<Member name="forceInstant" type="bool">false</Member>
		
		<Member name="ignoreTimechange" type="bool">false</Member>
	</Type>

	<Enum name="daycyclePatchCriticalPriority">
	
		<none />
		
		<cutscene_init />
		<cutscene_dialogFadingIn />
	
	</Enum>
	
	<Type name="daycycle">

		<Type name="activityEndNotification">

			<Member name="activity" type="daycycle:activity" />
			<Member name="success" type="bool" />

		</Type>

		<Type name="change">

			<!-- <true>: Add new patch; <false>: Remove patch with the provided handle -->
			<Member name="add" type="bool" />

			<Member name="startTime" type="float">0</Member>
			<Member name="endTime" type="float">24</Member>
			<Member name="sourceId" type="common:wuid" />
			<Member name="name" type="string" />
			<Member name="once" type="bool" />
			<Member name="immediate" type="bool" />
			<Member name="priority" type="int">10</Member>
			<Member name="handle" type="string" />
			<Member name="nowOrNever" type="bool" />
			<Member name="immediateDaycycleHaltSpeed" type="enum:daycycleHaltSpeed">$enum:daycycleHaltSpeed.slow</Member>
			<Member name="priorityBoost" type="bool">true</Member>
			<Member name="ignoreDuplicit" type="bool" />
			<Member name="criticalPriority" type="enum:daycyclePatchCriticalPriority" />

		</Type>

		<Type name="behavior">

			<Type name="progress">

				<!-- <true>: Behavior starts, <false>: Behavior ends -->
				<Member name="progress" type="bool" />
				<Member name="behavior" type="string" />

			</Type>

			<Type name="data">
				<Member name="moveToArea" type="bool">true</Member>
				<Member name="moveToOutside" type="bool">false</Member>
				<Member name="skipInRain" type="bool">false</Member>
				<Member name="patchInRain" type="bool">false</Member>
				<Member name="allowSituation" type="bool">true</Member>
				<Member name="clothes" type="changeClothes" />
				<Member name="spotting" type="float">0.0125</Member> <!-- dirt value changed by one tick (45-75min) in DC -->
				<Member name="innerBehavior" type="behaviorRequest" /><!-- used to transfer data between goToSmartArea_data and goToSmartArea-->
				<Member name="closeShopOnEnd" type="bool">true</Member> <!-- Closes shop on leaving behavior. If false, SA must handle it somehow (used in `tmpl-so_shop` to delay closing of shop) -->
			</Type>

			<Type name="stopContext">
				<Member name="_" type="bool" />
			</Type>

		</Type>

		<Type name="interrupt">

			<!-- If 'behaviorName' is set, call a behavior -->
			<Member name="behaviorSource" type="common:wuid" />
			<Member name="behaviorName" type="string" />

			<!-- If 'behaviorName' is blank, include an XML tree -->
			<Member name="includeXml" type="string" />
			<Member name="includeTree" type="string" />

			<!-- Speed with which to halt current activity -->
			<Member name="daycycleHaltSpeed" type="enum:daycycleHaltSpeed">$enum:daycycleHaltSpeed.slow</Member>
			
			<!-- If the interrupt was induced by an immediate patch being scheduled, this is the handle of that patch -->
			<Member name="immediateActivityBeingSwitchedIntoHandle" type="string" />

		</Type>

		<Type name="haltContext">

			<Member name="reason" type="enum:daycycleHaltReason" />
			<Member name="speed" type="enum:daycycleHaltSpeed" />

		</Type>

		<Type name="hasDaycycleCheck">

			<Member name="_" type="bool" />

		</Type>

		<Type name="restartRequest">

			<Member name="reason" type="enum:daycycleHaltReason" />
			<Member name="speed" type="enum:daycycleHaltSpeed" />

		</Type>

	</Type>

	<Type name="patchData">
		<Type name="q_auschitz_mass">
			<Member name="spot" type="common:wuid"/>
		</Type>
	</Type>

	<!-- ========================== Instruction ========================== -->

	<Type name="instruction">

		<Type name="request">

			<Member name="behaviorSource" type="common:wuid" />
			<Member name="behaviorName" type="string" />

			<Member name="includeXml" type="string" />
			<Member name="includeTree" type="string" />

		</Type>

	</Type>

	<!--****************************** ATHERT'S TYPE DEFINITIONS-->
	<Enum name="horseRaceType">
		<custom />
		<normal />
	</Enum>

	<Enum name="horseRaceDifficulty">
		<easy />
		<medium />
		<hard />
		<custom />
	</Enum>

	<Enum name="horseRaceReason">
		<minimumRacers />
		<doesntStart />
		<doesntArrive />
		<inRace />
	</Enum>

	<Type name="horseRaceInit">

		<Member name="origin" type="common:wuid" />

		<!-- horseRaceDifficulty enum value -->
		<Member name="difficulty" type="enum:horseRaceDifficulty"/>

		<!-- horseRaceType enum value -->
		<Member name="type" type="enum:horseRaceType">-1</Member>

		<!-- time when horse race will start (if player will not be near start on horse in this time, race will end for him) -->
		<Member name="raceStartTime" type="int">15</Member>

		<!-- time when all horse racers and npcs from city will be patched. Usually cca 3hrs before start. -->
		<Member name="patchTime" type="int">12</Member>

		<Member name="organizerTree" type="string" />
		<Member name="organizerObject" type="common:wuid" />
	</Type>

	<Type name="horseRaceStart">
		<Member name="start" type="bool">true</Member>
	</Type>

	<Type name="horseInitRequest">
		<Member name="_" type="bool" />
	</Type>

	<Type name="horseRaceStop">
		<Member name="nothing" type="bool" />
	</Type>

	<Type name="horseRaceResultMessage">
		<Member name="result" type="int">-1</Member>
		<Member name="racers" type="int">-1</Member>
		<Member name="reason" type="enum:horseRaceReason"/>
	</Type>

	<Type name="horseRaceHitTrigger">
		<Member name="racer" type="common:wuid"/>
		<Member name="triggerIndex" type="int">0</Member>
	</Type>

	<Enum name="ladderState">
		<unused />
		<usedForClimbUp />
		<usedForClimbDown />
	</Enum>


	<Enum name="fireplaceCommandType">
		<setFull />
		<setEmpty />
		<setFireOn />
		<setFireOff />
		<setBuff/>
		<removeBuff/>
		<removeAllBuffs/>
		<getRefillStatus/>
		<getFireStatus/>
		<setFoodFull />
		<setFood />
		<removeFood />
		<getFoodValue />
		<setFireLock />
		<getBehaviorRemember />
		<setBehaviorRemember />
		<setFireAlwaysOn />
		<resetFireAlwaysOn />
		<makeFireUnlightable />
		<resetUnlightable />
		<addMeAsBuffWatcher />
		<removeMeAsBuffWatcher />
		<forceFire />
	</Enum>
	
	

	<Enum name="furnaceState">
		<none />
		<cooking />
		<fillBowl />
	</Enum>
	
	<Type name="playerEat">
		<Member name="itemGuid" type="string"/>
	</Type>

	<Type name="fireplace">
		<Type name="init">

			<!-- fireType enum value -->
			<Member name="fire" type="enum:fireType"/>
			<Member name="fuel" type="int">0</Member>

			<!-- value of minutes from last refill fireplace -->
			<Member name="timeFromRefill" type="int">0</Member>
			<Member name="food" type="int">0</Member>
		</Type>
		<Type name="command">

			<!-- fireplaceCommandType enum value -->
			<Member name="command" type="enum:fireplaceCommandType"/>

			<!-- if we use enum and we want add some value, we use value here! (much logic, very wow, such great) -->
			<Member name="value" type="int">-1</Member>
			<Member name="valueWuid" type="common:wuid"/>
			<Member name="valueGuid" type="string"/>

			<!-- usefull for add/remove buffs. If we write "all_behavior" in "removeBuff" command type, we remove all buffs with specific Wuid. -->
			<Member name="behavior" type="string">null</Member>
		</Type>
		<Type name="buffs">
			<Member name="buff" type="string"/>

			<!-- we can use buffs for every behavior (poison for eating, rest buff for slacking etc.) -->
			<Member name="behavior" type="string">null</Member>
		</Type>
		<Type name="refill">
			<Member name="needRefill" type="bool">false</Member>
		</Type>
		<Type name="food">
			<!-- food value from fireplace -->
			<Member name="value" type="int">0</Member>
		</Type>
		<Type name="fire">
			<Member name="value" type="bool"/>
		</Type>
		<Type name="behaviorRemember">

			<Member name="behavior" type="string">null</Member>
			<!-- number of failed calls (for example. We want eat something but there isnt food.) -->
			<Member name="value" type="int">0</Member>
			<Member name="isBlocked" type="bool">false</Member>
		</Type>
		<Type name="canWork">
			<Member name="can" type="bool" />
		</Type>

		<!-- new fireplace -->
		<Type name="refreshTimer">
			<Member name="_" type="bool"/>
		</Type>

		<Type name="shutdown">
			<Member name="active" type="bool"/>
		</Type>
	</Type>

	<Type name="fireInteractiveEvent">
		<Member name="by" type="common:wuid"/>

		<!-- fireType enum value -->
		<Member name="command" type="enum:fireType"/>
	</Type>

	<Type name="cookingRecipe">
		<Member name="item" type="string">null</Member>
		<Member name="value" type="int">0</Member>
	</Type>
	
	<Type name="openBehavior">
		<Member name="tree" type="string"/>
		<Member name="name" type="string"/>
	</Type>
	
	<Type name="callAutoTest">
		<Member name="namespace" type="string"/>
		<Member name="command" type="string"/>
	</Type>
	
	<Type name="autoTestCommand">
		<Member name="namespace" type="int"/>
		<Member name="command" type="int"/>
		<Member name="instruction" type="int"/>
	</Type>

	<Type name="stashInfo">
		<Member name="guid" type="string" />

		<Type name="onClosedByPlayer">
			<Member name="id" type="common:wuid" />
		</Type>
	</Type>

	<Enum name="shelveCommandEnum">
		<refillAll />
	</Enum>

	<Type name="shelveCommand">
		<!-- shelveCommandEnum enum value -->
		<Member name="command" type="enum:shelveCommandEnum"/>
	</Type>

	<Enum name="sermonState">
		<none />
		<preparing />
		<inProgress />
	</Enum>

	<Type name="church">
		<Type name="sermonValue">
			<!-- sermonState enum value -->
			<Member name="sermon" type="enum:sermonState"/>
		</Type>
	</Type>

	<Type name="duelItemsToReturn">
		<Member name="item" type="string" />
		<Member name="count" type="int" />
		<Member name="health" type="int" />
	</Type>

	<Type name="meleeDefenseAutomationControlsType">
		<Member name="noBlock" type="float">1</Member>
		<Member name="normalBlock" type="float">1</Member>
		<Member name="perfectBlock" type="float">1</Member>
		<Member name="specialPerfectBlock" type="float">1</Member>
		<Member name="dodge" type="float">1</Member>
		<Member name="trickReactionDelay" type="float">1</Member>
		<Member name="disableStaticPreblock" type="bool">false</Member>
		<Member name="disableReactivePreblock" type="bool">false</Member>
	</Type>

	<Type name="meleeOffenseAutomationControlsType">
		<Member name="staminaLimitForAutoAttack" type="float">-1</Member>
		<Member name="periodicalAttackTiming" type="float">-1</Member>
		<Member name="periodicalAttackBias" type="float">-1</Member>
		<Member name="disableTricks" type="bool">false</Member>
		<Member name="noComboProb" type="float">-1</Member>
		<Member name="comboProb" type="float">-1</Member>
		<Member name="naturalComboProb" type="float">-1</Member>
		<Member name="forcedCombo" type="int">-1</Member>
		<Member name="inputClass" type="int">-1</Member>
	</Type>
	
	<Type name="playerCombatControl">
		<Member name="normalBlock" type="bool">false</Member>
		<Member name="perfectBlock" type="bool">false</Member>
		<Member name="dodge" type="bool">false</Member>
		<Member name="heavyAttack" type="bool">false</Member>
		<Member name="lightAttack" type="bool">false</Member>
		<Member name="specialAttack" type="bool">false</Member>
		<Member name="riposte" type="bool">false</Member>
		<Member name="clinchGuard" type="bool">false</Member>
		<Member name="clinchAction" type="bool">false</Member>
		<Member name="movement" type="bool">false</Member>
		<Member name="attackCooldown" type="int">0</Member>
		<Member name="limitedWeaponAttack" type="int">0</Member>
	</Type>

	<Type name="duel">
		<Type name="startDuelWithPlayer">
			<Member name="bet" type="int">0</Member>
			<!--
		1,3,5,6(mistr is available only after defeat of the previous opponent) ... for duel with NPC that send message, send -2 as difficulty. For tutorial with sender, -1
		-->
			<Member name="difficulty" type="int">0</Member>
			<Member name="borrowArmor" type="int">0</Member>
			<!-- look at "duelWeaponTypes" !
		every type of weapon used in duel is easy to upgrade. Just add new sequence to dialog and add number of "enum". Then go to duel SA and add new weapon type to variable - weaponTypeForDuel
		-->
			<Member name="myWeapons" type="enum:duelWeaponTypes"/>
			<Member name="enemyWeapons" type="enum:duelWeaponTypes"/>

			<!-- for almost every type of duel weapons we have wooden type for training fight. -->
			<Member name="isWooden" type="int">0</Member>

			<Member name="customCombat" type="string"/>
			<Member name="customCombatSource" type="common:wuid"/>
		</Type>
		<Type name="stopDuel">
			<!-- forceEnd is used for player notification (player want go to duel) . -->
			<Member name="forceEnd" type="bool">false</Member>
			<Member name="teleportNpc" type="bool">false</Member>
			<!-- we are sending stopDuel message to duelist, this wuid is winner from duel so NPCs can recognize who need to play "winner" animation and who will play "surrender" . -->
			<Member name="winner" type="common:wuid"/>
		</Type>
		<Type name="duelRequest">
			<Member name="add" type="bool">false</Member>
		</Type>
		<Type name="waitingOnDuel">
			<Member name="_" type="bool">false</Member>
		</Type>
		<Type name="refreshDuelRequests">
			<Member name="_" type="bool">false</Member>
		</Type>
		<Type name="duelNpcWinnerInfo">
			<Member name="winner" type="common:wuid"/>
			<Member name="against" type="common:wuid"/>
		</Type>
		<Type name="duelResult">
			<Member name="result" type="int">0</Member>
			<Member name="opponentDifficulty" type="int">0</Member>
		</Type>
		<Type name="suspendDuel">
			<Member name="suspend" type="bool">false</Member>
		</Type>
	</Type>

	<Enum name="tournamentPreparePhase">
		<none />
		<talkAboutTournament />
		<prepareObjects />
		<firstStage />
		<secondStage />
		<clearStage/>
	</Enum>

	<Type name="tournament">
		<Type name="prepareTournament">
			<!--	tournamentPreparePhase	-->
			<Member name="phase" type="enum:tournamentPreparePhase"/>
		</Type>
		<Type name="startTournament">
			<Member name="startIt" type="bool">false</Member>
		</Type>
		<Type name="restartTournament">
			<Member name="_" type="bool"/>
		</Type>
		<Type name="registerEntityForTournament">
			<Member name="add" type="bool">false</Member>
			<Member name="entity" type="common:wuid"/>
		</Type>
		<Type name="combatant">
			<Member name="first" type="common:wuid"/>
			<Member name="second" type="common:wuid"/>
		</Type>
		<Type name="tournamentEntity">
			<Member name="entity" type="common:wuid"/>
			<Member name="wins" type="int">0</Member>
			<Member name="combatCount" type="int">0</Member>
		</Type>
		<Type name="tournamentFinal">
			<Member name="_" type="int"/>
		</Type>
	</Type>

	<Enum name="entityClass">
		<male />
		<female />
		<horse />
	</Enum>

	<Type name="entity">
		<Type name="spawn">
			<Member name="name" type="string"/>
			<Member name="guid" type="string"/>
			<Member name="position" type="common:vec3"/>
			<Member name="class" type="enum:entityClass"/>

			<Member name="idleUntilFirstPatch" type="bool">true</Member>
			<Member name="answerTo" type="common:wuid"/>
		</Type>
		<Type name="despawn">
			<Member name="entity" type="common:wuid"/>
		</Type>
		<Type name="answer">
			<Member name="entity" type="common:wuid"/>
		</Type>
	</Type>

	<Enum name="callEvents">
		<all />
		<onUse />
		<onEnter />
		<onExit />
	</Enum>

	<Type name="callEvent">
		<Type name="add">
			<!--	what event we want to check 	-->
			<Member name="event" type="enum:callEvents"/>
			<!--	entit we want to check (nullWuid if we want everyone) 	-->
			<Member name="entity" type="common:wuid"/>
			<!--	if sendTo is nullWuid, then we send message to sender 	-->
			<Member name="sendTo" type="common:wuid"/>
		</Type>
		<Type name="remove">
			<!--	define what entity from what listener we want to remove (becouse we can listen from multiple objects)	-->
			<Member name="entity" type="common:wuid"/>
			<Member name="sendTo" type="common:wuid"/>
		</Type>
		<Type name="message">
			<!--	what event we triggered 	-->
			<Member name="event" type="enum:callEvents"/>
			<!--	what entity hit this trigger 	-->
			<Member name="entity" type="common:wuid"/>
		</Type>
	</Type>

	<Enum name="benchResult">
		<none />
		<found />
		<error />
		<maxInstance />
	</Enum>

	<Enum name="benchEnterType">
		<front />
		<back />
		<left />
		<right />
		<frontLeft />
		<frontRight />
	</Enum>

	<Enum name="benchSizeType">
		<freePositions />
		<allPositions />
	</Enum>

	<Type name="bench">
		<Type name="place">
			<Member name="helperName" type="string"/>
			<Member name="occupant" type="common:wuid"/>
			<Member name="enterType" type="enum:benchEnterType"/>

			<!-- for reservation system. We can say we keep this place even after release behavior. -->
			<Member name="keep" type="bool">false</Member>
		</Type>
		<Type name="getSize">
			<Member name="sizeType" type="enum:benchSizeType"/>
		</Type>
		<Type name="answerSize">
			<Member name="size" type="int"/>
		</Type>
		<Type name="getOccupants">
			<Member name="includePlayer" type="bool">true</Member>
		</Type>
		<Type name="occupants">
			<Member name="entity" type="common:wuid"/>
			<!-- include place where NPC (or player) is sitting. Places are counted from left to right -->
			<Member name="place" type="int"/>
		</Type>
		<Type name="getOccupantHelper">
			<Member name="entity" type="common:wuid"/>
		</Type>
		<Type name="answerOccupantHelper">
			<Member name="helperName" type="string"/>
		</Type>
		<Type name="reservePlace">
			<Member name="reserve" type="bool">true</Member>
			<Member name="place" type="int"/>
			<Member name="entity" type="common:wuid"/>
			<Member name="keep" type="bool">false</Member>
			<Member name="forceMove" type="bool">false</Member>
		</Type>
		<Type name="placeReserved">
			<Member name="success" type="bool">true</Member>
		</Type>
		<Type name="lockForPlayer">
			<Member name="lock" type="bool">true</Member>
		</Type>
		<Type name="linkReserve">
			<Member name="keep" type="bool">false</Member>
			<Member name="place" type="int"/>
		</Type>
		<Type name="params">
			<Member name="animationOverrride" type="string"></Member>
		</Type>
	</Type>

	<Enum name="sitPlaceType">
		<all />
		<bench />
		<ground />
	</Enum>

	<Enum name="campAlertnessEventType">
		<none />
		<alert />
		<corpse />
		<horseScare />
		<horseScareRemove />
	</Enum>

	<Type name="camp">
		<!--	ONLY FOR TEST	-->
		<Type name="getSlacking">
			<Member name="isImportant" type="bool"/>
			<Member name="_" type="bool"/>
		</Type>
		<Type name="slacking">
			<Member name="name" type="string"/>
			<Member name="timeFrom" type="float"/>
			<Member name="timeTo" type="float"/>
			<!--
			if we set slacking behavior as -important- then NPC that have link from himself to our camp SA with tag "important" will only search through this behaviors.
			Behaviors without tag -important- will be ignored for this NPC.
		-->
			<Member name="important" type="bool">false</Member>
			<!--
			everytime someone call for slacking, we add multiplier to job weight. If weight is above 1f then we will send this work to requester.
			if weight is set to -1, then we will call this job everytime
		-->
			<Member name="weight" type="float"/>
			<Member name="weightMultiplier" type="float"/>
			<!--
			if there is something in graphSearch member (for example "duel"), then while we check for slacking, we check if there exist link
			between our object and something with category "$graphCheck"
		-->
			<Member name="graphCheck" type="string"/>
		</Type>
		<Type name="alertnessEvent">
			<Member name="event" type="enum:campAlertnessEventType"/>
		</Type>
	</Type>

	<Type name="saveQueueType">
		<Member name="timestamp" type="int"/>
		<Member name="behavior" type="string">unknown</Member>
	</Type>


	<Type name="VillageGuardAnswer">
		<Member name="canDespawn" type="bool">false</Member>
	</Type>
	<Type name="guardDeadTimer">
		<Member name="time" type="int64" />
	</Type>
	<!--
	every type of clothes (enum) must be in behavior 'changeClothes' in enumStringConvertion variable.
	for example => $enumStringConvertion[$enum:typeOfClothes.normal] = 'changeClothes_normalPreset' <=
	string 'changeClothes_normalPreset' will be used as linkTag to stash where this clothes are set.
-->
	<Enum name="typeOfClothes">
		<normal />
		<sleep />
		<!--	this is just to show how it works!	-->
		<customTestArmor />
		<!--	================================	-->
		<any />
	</Enum>

	<Enum name="typeOfWeapons">
		<empty />
		<sleep />
		<!--
			if you use "empty", NPC can refuse to place weapon, becouse if he was recently in combat.
			if you NEED to make npc to place weapons, just use "forceEmpty".
		-->
		<forceEmpty />
		<normal />
		<!--	this is just to show how it works!	-->
		<customWeapons />
		<!--	================================	-->
		<any />
	</Enum>
	
	<Type name="clothes">
		<Type name="init">
			<Member name="clothesType" type="string">normal</Member>
			<Member name="weaponType" type="string">empty</Member>
			
			<Member name="actualClothesGUID" type="string"/>
			<Member name="actualWeaponGUID" type="string"/>
			
			<Member name="defaultClothesGUID" type="string"/>
			<Member name="defaultWeaponGUID" type="string"/>

			<!--	we have night presets set in script (switch Init)	-->
			<Member name="nightClothesGUID" type="string"/>
			<Member name="nightWeaponGUID" type="string"/>
		</Type>
		
		<Type name="override">
			<Member name="name" type="string"/>
			
			<!--	we can have weapon or clothes preset and we need to know what exactly we want to overwrite	-->
			<Member name="isClothesPreset" type="bool">true</Member>
			<Member name="override" type="bool">false</Member>
			
			<Member name="createIfNotFound" type="bool">false</Member>
			<Member name="instantEquip" type="bool">false</Member>
			<Member name="goShopIfNotFound" type="bool">false</Member>
			<Member name="createIfCannotShop" type="bool">false</Member>
		</Type>
		<Type name="linkData">
			<Member name="guid" type="string"/>
		</Type>	
		<Type name="stashData">
			<Member name="guid" type="string"/>
			<Member name="stash" type="common:wuid" />
		</Type>	
		<Type name="dressUp">
			<Member name="name" type="string"/>
			<Member name="guid" type="string"/>
			<Member name="stash" type="common:wuid" />
			
			<Member name="isClothesPreset" type="bool">true</Member>
			
			<Member name="createIfNotFound" type="bool">false</Member>
			<Member name="instantEquip" type="bool">false</Member>
			<Member name="goShopIfNotFound" type="bool">false</Member>
			<Member name="createIfCannotShop" type="bool">false</Member>
		</Type>
		<Type name="createTimer">
			<Member name="guid" type="string"/>
			<Member name="target" type="common:wuid" />
			<Member name="initTime" type="int64"/>
		</Type>	
	</Type>

	<Type name="ath">
		<Type name="bWaitPoint">
			<Member name="Sender" type="string">null</Member>
			<Member name="MyPos" type="int">0</Member>
			<Member name="Content" type="string">null</Member>
			<Member name="TagPoint" type="string">null</Member>
			<Member name="TagPointID" type="int">0</Member>
			<Member name="GoTo" type="string">null</Member>
			<Member name="IsWaitPoint" type="bool">false</Member>
		</Type>
		<Type name="bEntryPoint">
			<Member name="Sender" type="string">null</Member>
			<Member name="MyPos" type="int">0</Member>
			<Member name="Content" type="string">null</Member>
			<Member name="TagPoint" type="string">null</Member>
			<Member name="GoTo" type="string">null</Member>
			<Member name="TagPointID" type="int">0</Member>
			<Member name="IsWaitPoint" type="bool">false</Member>
			<Member name="FrontTo" type="bool">false</Member>
		</Type>
		<Type name="posRot">
			<Member name="Position" type="common:vec3" />
			<Member name="Rotation" type="common:vec3" />
			<Member name="M_Position" type="common:vec3" />
			<Member name="M_Rotation" type="common:vec3" />
		</Type>
		<Type name="bSendData">
			<Member name="UnitID" type="int">0</Member>
			<Member name="UnitName" type="string">null</Member>
			<Member name="PlaceID" type="int">0</Member>
			<Member name="MyPos" type="int">0</Member>
			<Member name="GoTo" type="string">null</Member>
			<Member name="MaxID" type="int">0</Member>
			<Member name="Waiting" type="bool">false</Member>
			<Member name="WantStandUp" type="bool">false</Member>
			<Member name="FrontTo" type="bool">false</Member>
		</Type>
		<Type name="canGo">
			<Member name="UnitID" type="int">0</Member>
			<Member name="UnitName" type="string">null</Member>
			<Member name="CanMove" type="bool">false</Member>
		</Type>
		<Type name="delAll">
			<Member name="UnitID" type="int">0</Member>
			<Member name="UnitName" type="string">null</Member>
			<Member name="DeleteAll" type="bool">false</Member>
		</Type>
		<Type name="sendData">
			<Member name="Sender" type="string">null</Member>
			<Member name="MyPos" type="int">0</Member>
			<Member name="HelperID" type="int">0</Member>
			<Member name="MoveTo" type="string">null</Member>
			<Member name="TagPoint" type="string">null</Member>
			<Member name="MaxPos" type="int">0</Member>
			<Member name="BlockMove" type="string">null</Member>
			<Member name="MasterAreaGUID" type="common:wuid">0</Member>
			<Member name="ObjectGUID" type="common:wuid">0</Member>
			<Member name="PlaceName" type="string">null</Member>
		</Type>
		<Type name="updateBenchArea">
			<Member name="BenchID" type="int">0</Member>
			<Member name="AddUser" type="bool">false</Member>
			<Member name="UserID" type="int">0</Member>
			<Member name="BenchPos" type="int">0</Member>
		</Type>
		<Type name="useBenchArea">
			<Member name="BenchID" type="int">0</Member>
			<Member name="BenchName" type="string">null</Member>
		</Type>
		<Type name="saveBuckets">
			<Member name="UseBy" type="common:wuid" />
			<Member name="BenchID" type="common:wuid" />
		</Type>
		<Type name="registerArea">
			<Member name="AreaName" type="string">null</Member>
			<Member name="AreaID" type="int">0</Member>
			<Member name="benchName" type="string">null</Member>
			<Member name="benchMaxPos" type="int">0</Member>
			<Member name="AreaGUID" type="common:wuid" />
		</Type>
		<Type name="sitBenchData">
			<Member name="UnitID" type="common:wuid">0</Member>
			<Member name="IsUsed" type="bool">false</Member>
			<Member name="PlaceID" type="int">0</Member>
			<Member name="Name" type="string">null</Member>
			<Member name="MoveTo" type="string">null</Member>
			<Member name="TagPointName" type="string">null</Member>
			<Member name="TagPointID" type="int">0</Member>
			<Member name="Block" type="string">null</Member>
			<Member name="PlaceName" type="string">null</Member>
		</Type>
		<Type name="areaBenchSave">
			<Member name="NumberOfPlace" type="int">0</Member>
			<Member name="UsedPlace" type="int">0</Member>
			<Member name="Id" type="int">0</Member>
			<Member name="linkName" type="string">null</Member>
			<Member name="Name" type="string">null</Member>
		</Type>
		<Type name="sendSitUseData">
			<Member name="HelperID" type="int">0</Member>
			<Member name="Content" type="string">null</Member>
			<Member name="Sender" type="common:wuid" />
		</Type>
		<Type name="myLeader">
			<Member name="LeaderGUID" type="common:wuid" />
			<Member name="Actor" type="string">null</Member>
			<Member name="MustFollow" type="bool">false</Member>
			<Member name="FollowGUID" type="common:wuid" />
		</Type>
		<Type name="attackTo">
			<Member name="MessageFrom" type="common:wuid" />
			<Member name="KillListGUID" type="common:wuid" />
			<Member name="VelitelGUID" type="common:wuid" />
		</Type>
		<Type name="attackInfo">
			<Member name="AttackFrom" type="common:wuid" />
		</Type>
		<Type name="getSetTable">
			<Member name="name" type="string">null</Member>
			<Member name="target" type="string">null</Member>
		</Type>
		<Type name="wh_storage">
			<Member name="value" type="int">0</Member>
			<Member name="canUse" type="bool">false</Member>
			<Member name="ObGuid" type="common:wuid" />
		</Type>
		<Type name="wh_storage_send">
			<Member name="name" type="string">NULL</Member>
			<Member name="value" type="int">0</Member>
			<Member name="canUse" type="bool">false</Member>
			<Member name="ObGuid" type="common:wuid" />
		</Type>
		<Type name="typeOfWorks">
			<Member name="nextBeh" type="string" />
			<Member name="value" type="int" />
		</Type>
		<Type name="campWork">
			<Member name="myBeh" type="string" />
			<Member name="addMe" type="bool" />
			<Member name="meGuid" type="common:wuid" />
		</Type>
		<Type name="setNewCampBeh">
			<Member name="newBeh" type="string" />
		</Type>
		<Type name="foodTable">
			<Member name="Item" type="common:wuid" />
			<Member name="isEmpty" type="bool" />
			<Member name="canUse" type="bool">false</Member>
			<Member name="myPos" type="common:transform" />
		</Type>
		<Type name="benchTest">
			<Member name="Test" type="bool" />
		</Type>
		<Type name="benchPlaces">
			<Member name="takenBy" type="common:wuid" />
			<Member name="fromHelper" type="int" />
			<Member name="moveSide" type="string" />
			<Member name="freezePos" type="bool" />
			<Member name="isSitting" type="bool" />
		</Type>
		<Type name="benchSend">
			<Member name="myPos" type="int" />
			<Member name="maxPos" type="int" />
			<Member name="fromHelper" type="int" />
			<Member name="moveSide" type="string" />
			<Member name="setSleep" type="string" />
		</Type>
		<Type name="benchSendRelease">
			<Member name="setRelease" type="bool" />
			<Member name="answerTo" type="common:wuid" />
		</Type>
		<Type name="benchOccupNpcs">
			<Member name="Wuid" type="common:wuid" />
		</Type>
		<Type name="sendGuardPos">
			<Member name="GPos" type="common:wuid" />
			<Member name="MustKeep" type="bool">false</Member>
			<Member name="Occuped" type="common:wuid" />
			<Member name="JustSee" type="bool">false</Member>
			<Member name="CampWalk" type="bool">false</Member>
		</Type>
		<Type name="guardPositions">
			<Member name="Position" type="common:wuid" />
			<Member name="Occuped" type="common:wuid" />
			<Member name="Visitor" type="common:wuid" />
			<Member name="OccupTime" type="int">0</Member>
		</Type>
		<Type name="priorityGPos">
			<Member name="Priority" type="int">0</Member>
			<Member name="MustKeep" type="bool">false</Member>
			<Member name="CampWalk" type="bool">false</Member>
		</Type>
		<Type name="dress">
			<Member name="id" type="string">null</Member>
			<Member name="rank" type="string">Solder</Member>
		</Type>

		<!-- WORK PRIORITY
	name = Jmeno behavior, ktery budeme volat
	outOfArea = True/False pokud se prace muze vykonavat mimo SA (Napriklad patrola)
	priority = Priorita prace (vyuziva se pri minOccup volani)
	minOccup = Minimalni pocet NPC, kteri tuto praci museji vykonavat aby mohla byt vykonavana dalsi prace v poradi
	maxOccup = Maximalni pocet NPC, kteri tuto praci mohou vykonavat
	desirability = Moznost vyuziti povolani. Pokud je desir. mensi jak 0 tak povolani nemuze vykonavat. Pokud je vetsi, nebo rovno 1 tak povolani dostane. Toto je dulezite u povolani (napr. straz) kde nechceme aby i pres
					nahodny vyber bylo zde o nekolik lidí vice, nez jinde. Pocitani probiha stylem, ze pokud mam vetsi hodnotu jak 1 tak o hodnotu 1 snizuji. Po kazdem pocitani praci vsak hodnotu zvedam o hodnotu multiplier,
					tedy "$desirability += $multiplier"
	multiplier = pocitadlo desirability. viz nahore
	Rank = rank z entity:misc (napsano viz. "Rank:Soldier")
	-->
		<Type name="workPriority">
			<Member name="name" type="string">null</Member>
			<Member name="outOfArea" type="bool">false</Member>
			<Member name="priority" type="int">0</Member>
			<Member name="minOccup" type="int">1</Member>
			<Member name="maxOccup" type="int">0</Member>
			<Member name="startTime" type="float">-1</Member>
			<Member name="endTime" type="float">-1</Member>
			<Member name="multiplier" type="float">0</Member>
			<Member name="desirability" type="float">0</Member>
			<Member name="Rank" type="string">none</Member>
		</Type>
		<Type name="sendWork">
			<Member name="name" type="string">null</Member>
		</Type>
		<Type name="workChange">
			<Member name="resetSleep" type="bool">false</Member>
		</Type>
		<Type name="startSwordDuel">
			<Member name="bet" type="int">0</Member>
			<Member name="difficulty" type="int">0</Member>
			<Member name="borrowArmor" type="int">0</Member>

			<!-- look at "duelWeaponTypes" !
		every type of weapon used in duel is easy to upgrade. Just add new sequence to dialog and add number of "enum". Then go to duel SA and add new weapon type to variable - weaponTypeForDuel
		-->
			<Member name="myWeapons" type="enum:duelWeaponTypes"/>
			<Member name="enemyWeapons" type="enum:duelWeaponTypes"/>

			<!-- for almost every type of duel weapons we have wooden type for training fight. -->
			<Member name="isWooden" type="int">0</Member>

			<Member name="customCombat" type="string"/>
			<Member name="customCombatSource" type="string"/>
		</Type>
		<Type name="weaponTypeForDuel">
			<Member name="enumID" type="enum:duelWeaponTypes"/>
			<Member name="GUID" type="string"/>
			<Member name="isWooden" type="bool">false</Member>
		</Type>
		<Type name="changePos">
			<Member name="by" type="common:wuid"/>
		</Type>
		<Type name="sendPatrolRequest">
			<Member name="setRequest" type="bool">true</Member>
		</Type>
		<Type name="releasePatrol">
			<Member name="myCaptain" type="common:wuid"/>
		</Type>
		<Type name="globalPatrol">
			<Member name="Captain" type="common:wuid"/>
			<Member name="Follower" type="common:wuid"/>
		</Type>
		<Type name="isInPatrol">
			<Member name="myCaptain" type="common:wuid"/>
		</Type>
		<Type name="cannotFindGuard">
			<Member name="Guard" type="common:wuid"/>
			<Member name="Value" type="int">0</Member>
		</Type>
		<Type name="isGuardOkay">
			<Member name="by" type="common:wuid"/>
		</Type>
		<Type name="getGuardStatus">
			<Member name="by" type="common:wuid"/>
		</Type>
		<Type name="perceptionUnits">
			<Member name="unit" type="common:wuid"/>
			<Member name="relation" type="float"/>
			<Member name="canSee" type="bool"/>
			<Member name="lastPos" type="common:vec3"/>
		</Type>
		<Type name="waitingForDuel">
			<Member name="by" type="common:wuid"/>
		</Type>
		<Type name="canDuel">
			<Member name="val" type="bool">false</Member>
		</Type>
		<Type name="afterDuel">
			<Member name="val" type="bool">false</Member>
		</Type>
		<Type name="campQuestion">
			<Member name="val" type="string">nothing</Member>
		</Type>
		<Type name="campQuestion">
			<Member name="val" type="string">nothing</Member>
		</Type>
		<Type name="destroyPatrol">
			<Member name="Captain" type="common:wuid"/>
		</Type>
		<Type name="modifyWork">
			<Member name="addWork" type="bool">true</Member>
			<Member name="behName" type="string">nothing</Member>
			<Member name="priority" type="int">0</Member>
			<Member name="minOccup" type="int">1</Member>
			<Member name="maxOccup" type="int">-1</Member>
			<Member name="rank" type="string">Soldier</Member>
		</Type>
		<Type name="resumePatrol">
			<Member name="Captain" type="common:wuid"/>
			<Member name="CheckpointID" type="int">0</Member>
		</Type>

		<Type name="getArmorForPlayer">
			<Member name="armor" type="string">none</Member>
		</Type>

		<Type name="setCityPatrol">
			<Member name="city" type="common:wuid"/>
			<Member name="dangerPos" type="common:vec3"/>
		</Type>

		<Type name="unitCityPatrol">
			<Member name="city" type="common:wuid"/>
			<Member name="unit" type="common:wuid"/>
			<Member name="shift" type="int">1</Member>
		</Type>

		<Type name="cityAngryness">
			<Member name="maxValue" type="float">0</Member>
			<Member name="numberOfSoldiers" type="int">1</Member>
		</Type>

		<Type name="duelActionAnimMessage">
			<Member name="action" type="int"/>
		</Type>

		<Type name="duelResult">
			<Member name="result" type="int">0</Member>
			<Member name="opponentDifficulty" type="int">0</Member>
		</Type>

		<Type name="duelOpponents">
			<Member name="who" type="common:wuid"/>
			<Member name="isReady" type="bool">false</Member>
			<Member name="inCombat" type="bool">false</Member>
		</Type>

		<!--
	unit = 'Null' pokud chci nahodne vybrat jednotku pro rezervovani. Pokud tam zadam WUID primo vybrane jednotky, pokusim se rezervovat primo tu.
	reservedUnit = dostanu 'Null' pokud se mi nepodařilo najít náhodou jednotku k rezervaci, nebo pokud se mi nepodařilo vybranou jednotku rezervovat.
	highPriority = True/False pokud chci vyhledavat i v Guardu na nedůležitých místech.
	remove = True/False pokud má unit vymazat z pole rezervovaných jednotek.
	forceReserve = True/False pokud ma unit být přidána bez ohledu na to co dela.
	-->
		<Type name="reserveUnit">
			<Member name="unit" type="common:wuid"/>
			<Member name="reservedUnit" type="common:wuid"/>
			<Member name="highPriority" type="bool">false</Member>
			<Member name="forceReserve" type="bool">false</Member>
			<Member name="remove" type="bool">false</Member>
		</Type>

		<Type name="duelCompletedMessage">
			<Member name="isEnd" type="bool">false</Member>
		</Type>
		<Type name="createdItems">
			<Member name="who" type="common:wuid"/>
			<Member name="item" type="common:wuid"/>
		</Type>
		<Type name="duelCutScene">
			<Member name="start" type="bool">false</Member>
		</Type>
		<Type name="stopSynchDuel">
			<Member name="force" type="bool">false</Member>
		</Type>
		<Type name="dimoRequest">
			<Member name="topicId" type="int">0</Member>
			<Member name="monolog" type="bool">false</Member>
		</Type>
		<Type name="cityFaction">
			<Member name="city" type="common:wuid"/>
			<Member name="faction" type="int">0</Member>
		</Type>
	</Type>

	<Enum name="duelWeaponTypes">
		<Longsword />
		<Sword />
		<SwordAndShield />
		<Axe />
		<AxeAndShield />
		<Mace />
		<MaceAndShield />
		<Halberd />
		<Unarmed />
	</Enum>


	<!--****************************** pm'S TYPE DEFINITIONS-->
	<Type name="pm">
		<Type name="message">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
			<Type name="smartObjectInfo">
				<Member name="smartObjectGUID" type="common:wuid" />
			</Type>
			<Type name="npc">
				<Member name="GUID" type="common:wuid" />
				<Member name="name" type="string" />
				<Member name="behaviorTag" type="string" />
				<Member name="smartObjectGUID" type="common:wuid" />
				<Member name="placeName" type="string" />
				<Member name="count" type="int" />
				<Member name="uniqueKey" type="string" />
				<Member name="bool" type="bool" />
			</Type>
			<Type name="innkeeper">
				<Member name="customerGUID" type="common:wuid" />
				<Member name="customerName" type="string" />
				<Member name="smartObjectGUID" type="common:wuid" />
				<Member name="placeName" type="string" />
				<Member name="behaviorTag" type="string" />
				<Member name="position" type="common:vec3" />
				<Member name="orientation" type="common:vec3" />
				<Member name="linkName" type="string" />
				<Member name="uniqueKey" type="string" />
				<Member name="bool" type="bool" />
			</Type>
			<Type name="common">
				<Member name="bool" type="bool" />
			</Type>
		</Type>

		<Type name="order">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
			<Member name="smartObjectGUID" type="common:wuid" />
			<Member name="table" type="common:wuid" />
		</Type>

		<Type name="bartenderCommand">
			<Member name="sender" type="common:wuid" />
			<Member name="command" type="string" />
			<Member name="isLeaning" type="bool" />
		</Type>

		<Type name="leaderCommand">
			<Member name="sender" type="common:wuid" />
			<Member name="command" type="string" />
		</Type>

		<Type name="seat">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
			<Member name="tableGUID" type="common:wuid" />
			<Member name="benchGUID" type="common:wuid" />
			<Member name="npcGUID" type="common:wuid" />
			<Member name="isEmpty" type="bool">true</Member>
			<Member name="id" type="int" />
		</Type>

		<Type name="helper">
			<Member name="name" type="string">null</Member>
			<Member name="id" type="int">0</Member>
			<Member name="linkName" type="string">null</Member>
			<Member name="parent" type="string">null</Member>
			<Member name="isEmpty" type="bool">true</Member>
			<Member name="benchGUID" type="common:wuid" />
			<Member name="position" type="common:vec3" />
			<Member name="orientation" type="common:vec3" />
		</Type>

		<Type name="item">
			<Member name="GUID" type="common:wuid" />
			<Member name="user" type="common:wuid" />
			<Member name="isUsed" type="bool">false</Member>
		</Type>

		<Type name="entityInfo">
			<Member name="GUID" type="common:wuid" />
			<Member name="position" type="common:vec3" />
			<Member name="orientation" type="common:vec3" />
			<Member name="transform" type="common:transform" />
		</Type>

		<Type name="kitchenTableInfo">
			<Member name="GUID" type="common:wuid" />
			<Member name="position" type="common:vec3" />
			<Member name="orientation" type="common:vec3" />
			<Member name="transform" type="common:transform" />
			<Member name="hasMealTray" type="bool">false</Member>
			<Member name="newOrder" type="bool">false</Member>
		</Type>

		<Type name="query">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
		</Type>

		<Type name="cheersInfo">
			<Member name="isCheers" type="bool" />
			<Member name="tags" type="string" />
			<Member name="position" type="int" />
		</Type>

		<Type name="speaker">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
			<Member name="count" type="int" />
		</Type>

		<Type name="pubTableDialogEnd">
			<Member name="sender" type="common:wuid" />
			<Member name="content" type="string">null</Member>
		</Type>

		<Type name="soldierCommand">
			<Member name="sender" type="common:wuid" />
			<Member name="command" type="string" />
		</Type>

		<Type name="sitAnimation">
			<Member name="optionalMoveAnimation" type="string" />
			<Member name="fragmentSitDown" type="string" />
			<Member name="fragmentStandUp" type="string" />
			<Member name="tags" type="string" />
			<Member name="isActive" type="bool">false</Member>
		</Type>

		<Type name="travelerInfo">
			<Member name="sender" type="common:wuid" />
			<Member name="remove" type="bool">false</Member>
			<Member name="destination" type="common:wuid" />
		</Type>

		<Type name="crimeReport">
			<Member name="sender" type="common:wuid" />
			<Member name="criminal" type="common:wuid" />
			<Member name="crime" type="string" />
			<Member name="investigationInProgress" type="bool">false</Member>
		</Type>

		<Type name="patrolPath">
			<Member name="path" type="common:wuid" />
			<Member name="isReverse" type="bool">false</Member>
			<Member name="nextCheckpoint" type="int">0</Member>
		</Type>

		<Type name="pubCustomerBehavior">
			<Member name="isArea" type="bool">false</Member>
			<Member name="isActive" type="bool">false</Member>
			<Member name="id" type="common:wuid" />
			<Member name="behaviorName" type="string"/>
			<Member name="openPub" type="bool">false</Member>
			<!--metarole_orderingBeer is obsolete -->
			<Member name="metarole_orderingBeer" type="string">OBJEDNAT_PIVO</Member>
			<Member name="alias_orderingBeer" type="string">customer_wantBeer</Member>
			<Member name="alias_orderingMeal" type="string">customer_wantMeal</Member>
			<Member name="alias_cheers" type="string">customer_cheers</Member>
			<Member name="alias_waitingToLongForBeer" type="string">customer_waitingToLongForBeer</Member>
			<Member name="metarole_bark" type="string" />
			<Member name="isDrinking" type="bool">true</Member>
			<Member name="isEating" type="bool">true</Member>
			<Member name="isTalking" type="bool">true</Member>
		</Type>

		<Type name="fakeStats">
			<Member name="intoxication" type="int">0</Member>
		</Type>

		<Type name="nightingaleAreasOccupancy">
			<Member name="id" type="common:wuid" />
			<Member name="soundEntity" type="common:wuid" />
			<Member name="isOccupied" type="bool">false</Member>
		</Type>

		<Type name="cageQuestnightingales">
			<Member name="id" type="common:wuid" />
			<Member name="strId" type="string" />
			<Member name="isFull" type="bool">false</Member>
			<Member name="position" type="common:transform" />
			<Member name="soundEntity" type="common:wuid" />
			<member name="objectiveName" type="string" />
			<member name="objectiveMarker" type="string" />
			<member name="tagpointMarkerId" type="common:wuid" />
		</Type>

		<Type name="distance">
			<Member name="id" type="common:wuid" />
			<Member name="distance" type="float" />
		</Type>

		<Type name="combatQuestLogic">
			<Member name="id" type="common:wuid" />
			<Member name="name" type="string" />
		</Type>

	</Type>

	<Type name="pub">
		<Type name="visitInGroup">
			<Member name="tableId" type="common:wuid" />
		</Type>
		<Type name="bartender">
			<Type name="secondaryBehaviors">
				<Member name="sweeping" type="bool">true</Member>
				<Member name="wiping" type="bool">true</Member>
			</Type>
		</Type>
	</Type>

	<Type name="housework">
		<Member name="name" type="string" />
		<Member name="id" type="string" />
		<Member name="duration" type="string">1h</Member>
		<Member name="syncKey" type="string" />
	</Type>

	<Type name="behaviorMonolog">
		<Member name="smartArea" type="common:wuid" />
		<Member name="behavior" type="string" />
		<Member name="alias" type="string" />
	</Type>

	<Type name="npcRequest">
		<Member name="sender" type="common:wuid" />
		<Member name="count" type="int" />
		<Member name="status" type="string" />
	</Type>

	<Type name="timeChangeModeOn">
		<Member name="state" type="bool">true</Member>
		<Member name="duration" type="string">30m</Member>
	</Type>

	<Type name="setTransform">
		<Member name="object" type="common:wuid" />
		<Member name="target" type="common:wuid" />
	</Type>

	<!--************** js types ********-->
	<Type name="js">
		<Type name="burningHay">
			<Type name="playerInfo">
				<Member name="isBurning" type="bool"/>
			</Type>
			<Type name="consts">
				<Member name="burnTime" type="float">120000</Member>
				<!-- in miliseconds-->
				<Member name="descentStepCount" type="float">600</Member>
				<Member name="totalDescentHeight" type="float">1.5</Member>
				<Member name="fireToHayDescentRatio" type="float">0.5</Member>
				<!-- The fire particle needs to descent too! 0.5 = half pace.-->
			</Type>
			<Type name="hayInfo">
				<Member name="isBurning" type="bool"/>
			</Type>
		</Type>
	</Type>

	<!--****************************** ph'S TYPE DEFINITIONS  ***********************************-->

	<!--****************************** VP TYPE DEFINITIONS  ***********************************-->
	<Type name="testVariables">
		<Type name="child">
			<Member name="myVec" type="common:vec3" />
		</Type>
		<Member name="number" type="int">42</Member>
		<Member name="text" type="string">Oookk</Member>
	</Type>

	<Type name="startOnNPC">
		<Member name="woman" type="bool">true</Member>
		<Member name="man" type="bool">true</Member>
	</Type>

	<Type name="featureTestInfo">
		<Member name="behavior" type="string" />
		<Member name="lockCount" type="int" />
		<Member name="npcCount" type="int" />
	</Type>

	<!--  -->

	<Type name="useWeapon">
		<Member name="name" type="string" />
		<Member name="shield" type="bool" />
	</Type>

	<Type name="attackParams">
		<Member name="attackType" type="int" />
		<Member name="zone" type="int" />
	</Type>


	<!--****************************** CLEANUP TYPE DEFINITIONS  ***********************************-->

	<Type name="cleanup">
		<Member name="cleanupId" type="common:wuid" />
		<Member name="cleanupName" type="string" />
		<Member name="behaviorName" type="string" />
		<Member name="dcActivityName" type="string" />
		<Member name="sameActivity" type="bool" />
		<Member name="hasRequiredTools" type="bool" />
	</Type>

	<!--****************************** HOME RELATED DEFINITIONS *******************************-->
	<Type name="homeEvents">
		<Type name="onWakeUp">
			<Member name="timeId" type="int">0</Member>
			<Member name="helperId" type="int" />
			<Member name="target" type="common:wuid" />
		</Type>
		<Type name="onLockedDoor">
			<Member name="doorId" type="common:wuid" />
		</Type>
	</Type>

	<!--****************************** FARM RELATED DEFINITIONS *******************************-->
	<Type name="occupancy">
		<Member name="Occupied" type="bool">false</Member>
		<!-- This is true when I took the item out of available pool -->
		<Member name="IsInUse" type="bool">false</Member>
		<!-- This is true when I am really using the item, i.e. not just go towards it -->
		<Member name="Occupant" type="common:wuid" />
		<Member name="GUID" type="common:wuid" />
	</Type>

	<Type name="fieldProperties">
		<Member name="rowStart" type="common:wuid" />
		<Member name="rowEnd" type="common:wuid" />
		<Member name="fieldEnd" type="common:wuid" />
		<Member name="numberOfRows" type="int">6</Member>
		<Member name="startInRow" type="int">0</Member>
	</Type>

	<!--****************************** TOOL HANDLING DEFINITIONS *******************************-->

	<Type name="areaAndItemInSlot">
		<Member name="itemWuid" type="common:wuid" />
		<Member name="slotWuid" type="common:wuid" />
		<Member name="areaWuid" type="common:wuid" />
	</Type>

	<Type name="enquireForToolFromArea">
		<Member name="toolName" type="string" />
		<Member name="behaviorName" type="string" />
	</Type>

	<Type name="locationGeomProperties">
		<Member name="locationId" type="common:wuid" />
		<Member name="distance" type="float" />
		<Member name="gate" type="common:wuid" />
	</Type>

	<!--****************************** AREA RELATED DEFINITIONS *******************************-->

	<Type name="onEvent">
		<Member name="state" type="bool" />
		<Type name="fishery">
			<Member name="eventId" type="enum:fishingEvents" />
			<Member name="spotId" type="common:wuid" />
		</Type>
	</Type>

	<Enum name="fishingEvents">
		<ChangingFishingSpot value="1"/>
		<ReadyToFish value="2"/>
		<UnreadyToFish value="3"/>
		<CaughtFish value="4"/>
		<LeavingSpot value="5"/>
	</Enum>


	<!--****************************** shop TYPE DEFINITIONS ***********************************-->

	<Type name="shop">
		<Type name="signal">
			<Member name="Target" type="common:wuid" />
		</Type>

		<Type name="position">
			<Member name="sender" type="common:wuid" />
			<Member name="place" type="common:wuid" />
			<Member name="index" type="int" />
			<Member name="behavior" type="string" />
		</Type>

		<Type name="itemToBuy">
			<Member name="item" type="string" />
			<Member name="count" type="int" />
		</Type>

		<Type name="onCheckout">
		</Type>
	</Type>

	<!--****************************** MZ'S TYPE DEFINITIONS ***********************************-->

	<Type name="mz">

		<Type name="blacksmith">

			<!-- Used by the Smithery SA to pass a complete set of tools -->
			<!-- assigned to a blacksmith when he requests his behavior -->
			<Type name="toolset">

				<!-- Whether the toolset is valid (i.e. complete) -->
				<Member name="Valid" type="bool" />

				<!-- Individual tools -->
				<Member name="Anvil" type="common:wuid" />
				<Member name="Barrel" type="common:wuid" />
				<Member name="Bucket" type="common:wuid" />
				<Member name="Furnace" type="common:wuid" />
				<Member name="Hammer" type="common:wuid" />

				<!-- Set to <true> if a hammer was detected in the blacksmith's inventory and so no hammer is provided in the toolset -->
				<Member name="UseInventoryHammer" type="bool">false</Member>

			</Type>

			<!-- Send this message to the Smithy SA when it should hide the hammer -->
			<Type name="startLostHammerQuestNotification">

				<!-- Just so the type is not empty -->
				<Member name="dummy" type="int">0</Member>

			</Type>

		</Type>

		<Type name="testNum">
			<Member name="value" type="int" />
		</Type>

		<Type name="testBool">
			<Member name="value" type="bool" />
		</Type>

	</Type>

	<Type name="presenceAlert">

		<Type name="subscription">

			<Member name="entity" type="common:wuid" />
			<Member name="callback" type="common:wuid" />
			<Member name="entrance" type="bool" />
			<Member name="once" type="bool">false</Member>

		</Type>

		<Type name="unsubscription">

			<Member name="entity" type="common:wuid" />
			<Member name="callback" type="common:wuid" />
			<Member name="entrance" type="bool" />

		</Type>

		<Type name="event">

			<Member name="entity" type="common:wuid" />
			<Member name="entrance" type="bool" />

		</Type>

	</Type>

	<Type name="wave">

		<Type name="request">
			<Member name="lockName" type="_string" />
		</Type>

	</Type>


	<!--****************************** DudeProx TYPE DEFINITIONS  ***********************************-->

	<Type name="dudeProx">
		<Type name="params">
			<Member name="suppressGreet" type="bool">false</Member>
			<!-- suppress greeting barking -->
			<Member name="suppressStealth" type="bool">false</Member>
			<!-- suppress stealth barking completely -->
			<Member name="suppressWeapon" type="bool">false</Member>
			<!-- suppress weapon drawn barking completely -->
			<Member name="suppressTorch" type="bool">false</Member>
			<!-- suppress torch-missing-at-night barking completely -->
			<Member name="suppressAll" type="bool">false</Member>
			<!-- suppress all barking -->
			<Member name="metarole" type="string"/>
			<!-- override metarole -->
			<Member name="cooldownGreet" type="int">60</Member>
			<!-- changes cooldown for greeting -->
			<Member name="cooldownStealth" type="string">-1</Member>
			<!-- changes cooldown for stealth comment -->
			<Member name="cooldownWeapon" type="string">-1</Member>
			<!-- changes cooldown for weapon comment -->
			<Member name="cooldownTorch" type="string">-1</Member>
			<!-- changes cooldown for torch-missing-at-night comment -->
		</Type>

		<Type name="startGlobalTimeoutRequest">

			<Member name="seconds" type="int" />

		</Type>
	</Type>


	<!--****************************** HAND TYPE DEFINITIONS  ***********************************-->

	<Type name="pickingParameters">
		<Member name="hand" type="enum:handType"/>
		<Member name="customPick" type="bool">false</Member>
		<Member name="customPlace" type="bool">false</Member>
		<Member name="animationPick" type="string" />
		<Member name="tagsPick" type="string" />
		<Member name="animationPlace" type="string" />
		<Member name="tagsPlace" type="string" />
	</Type>

	<Type name="globalAnimationTags">
		<!-- OBSOLETE -->
		<Member name="useAnimationAlign" type="bool">false</Member>
		<Member name="pickTags" type="string"/>
		<Member name="placeTags" type="string"/>
	</Type>

	<Type name="stashPickItem">
		<Member name="inventory" type="common:wuid" />
		<Member name="targetInventory" type="common:wuid" />
		<Member name="item" type="common:wuid" />
		<Member name="amount" type="int" />
		<Member name="alignHelper" type="string" />
		<Member name="animationName" type="string" />
		<Member name="animationTag" type="string" />
	</Type>

	<!--****************************** MYKE'S TYPE DEFINITIONS  ***********************************-->

	<Type name="npcLocation">
		<Member name="id" type="int">0</Member>
		<Member name="location" type="string">None</Member>
	</Type>

	<Type name="guidInt">
		<Member name="destination" type="common:wuid" />
		<Member name="priority" type="int">0</Member>
		<Member name="active" type="bool">true</Member>
	</Type>

	<Type name="guardHistory">
		<Member name="id" type="common:wuid" />
		<Member name="total" type="int">0</Member>
		<Member name="last" type="int">0</Member>
	</Type>

	<!--****************************** ANIMATION HELPER TYPES *********************************-->
	<Type name="helperData">
		<Member name="helperInfo" type="helperInfo" />
		<Type name="bench">
			<Member name="posOnObject" type="int">0</Member>
			<Member name="posOnObject_max" type="int">0</Member>
			<Member name="accessSide" type="string">null</Member>
			<Member name="blockingSide" type="string">null</Member>
		</Type>
	</Type>
	<!--****************************** PARAMETRIZED CUSTOM ANIMATION TYPES ********************-->

	<Type name="customAnimation">
		<Type name="animation">
			<Member name="fragment" type="string" />
			<Member name="localTag" type="string" />
		</Type>
		<Type name="bed">
			<Member name="optionalMoveAnimation" type="string" />
			<Member name="context" type="string">SPANEK_ZVUKY</Member>
			<Member name="sitDown" type="customAnimation:animation"/>
			<Member name="lieDown" type="customAnimation:animation"/>
			<Member name="getUp" type="customAnimation:animation"/>
			<Member name="standUp" type="customAnimation:animation"/>
			<Member name="fromLieToSit" type="customAnimation:animation" />
			<Member name="fromSitToLie" type="customAnimation:animation" />
			<Member name="isActive" type="bool">false</Member>
		</Type>
	</Type>

	<!--****************************** DIALOG MODULE TYPES  ***********************************-->

	<Enum name="sequenceType">
		<default value="0" />
		<threaten value="1" />
		<persuade value="2" />
		<impress value="3" />
		<bribe value="4" />
		<trigger value="5" />
		<stealth value="6" />
		<return value="7" />
		<first_aid value="8" />
		<shop value="9" />
		<repair_shop value="10" />
		<skill_horseRiding value="11" />
		<trainer value="12" />
	</Enum>

	<Type name="dialogModule">
		<Type name="onDialogRequest">
			<Member name="state" type="bool">false</Member>
			<Member name="GUID" type="common:wuid" />
			<Member name="isForced" type="bool">false</Member>
			<Member name="reqId" type="int">0</Member>
		</Type>
		<Type name="onDialogRequestTimedOut">
			<Member name="GUID" type="common:wuid" />
			<Member name="reqId" type="int">0</Member>
		</Type>
		<Type name="onDialogRequestCanceled">
			<Member name="GUID" type="common:wuid" />
			<Member name="reqId" type="int">0</Member>
		</Type>
		<Type name="onDialog">
			<Member name="state" type="bool">false</Member>
			<Member name="reqId" type="int">0</Member>
			<Member name="interrupted" type="bool">false</Member>
		</Type>
		<Type name="onSequenceTypeAvailable">
			<Member name="name" type="enum:sequenceType" />
		</Type>
	</Type>

	<!--****************************** HIT REACTION TYPES ***********************************-->

	<Enum name="HitReactionType">

		<!-- These correspond to the C++ enum => weird values -->
		<Melee value="1" />
		<Collision value="2" />
		<Fall value="7" />
		<Bullet value="10" />
		<MeleeStealth value="16" />

	</Enum>

	<Enum name="HitReactionStrength">
		<Zero value="0" />
		<Healing value="1"/>
		<!-- the effect is positive (it adds health or stamina) -->
		<Tickle value="2"/>
		<!-- target wont suffer health loss, but some small stamina damage -->
		<Unpleasant value="3"/>
		<!-- no health loss, minor stamina damage -->
		<Exhausting value="4"/>
		<!-- no health loss, stamina gone or almost gone with this hit -->
		<MinorInjury value="5"/>
		<!-- damages health, but is not a big deal -->
		<MajorInjury value="6"/>
		<!-- almost all health points will be lost -->
		<Fatal value="7"/>
		<!-- will cause death even for a fully healthy target -->
	</Enum>

	<!--****************************** COMBAT MODULE TYPES ***********************************-->

	<Enum name="assaultVictimKind">
		<none />
		<npc />
		<animal />
		<!-- for boids (chickens etc.) -->
		<flock />
	</Enum>

	<Enum name="combatType">
		<duel />
		<battle />
	</Enum>

	<Enum name="combatMovementScale">
		<none />
		<unchanged/>
		<small />
		<medium />
		<large />
	</Enum>

	<Enum name="combatAttackKind">

		<none />
		<missile />
		<stealthAction />

		<!-- Melee hits: Ordinal in order of increasing violence -->
		<unarmed />
		<melee />

	</Enum>

	<Enum name="combatGuardState">
		<guardNoOverwrite />
		<guardOn />
		<guardOff />
		<guardOnOverwrite />
	</Enum>

	<Enum name="combatBlockState">
		<blockOff />
		<blockOn />
	</Enum>

	<Enum name="combatEndingInfo">
		<unknown />
		<enemyDead />
		<enemyRunAway />
		<fleeing />
		<givingUp />
		<enemyUnconscious />
		<friendAttackEnd />
	</Enum>

	<Enum name="combatEquipKind">
		<MeleeOnly />
		<MissileOnly />
		<All/>
		<None/>
	</Enum>

	<Enum name="combatTreeExecutionRegime">
		<haltedFromAbove />
		<keepRunning />
		<keepRunningNoEcho />
	</Enum>

	<Enum name="combatMovementControl">
		<internalMovement/>
		<externalMovement/>
		<holdPosition/>
	</Enum>

	<Enum name="combatMovementMode">
		<NoMovement />
		<SweetSpotOnly />
		<Approaching />
		<KeepDistance />
		<Retreat />
		<Charge />
		<None />
	</Enum>

	<Enum name="combatHotnessReason">
		<none />
		<shooterAtMe />
		<shooterAtFriend />
	</Enum>

	<Enum name="combatOpponentDistance">
		<None />
		<Near />
		<Middle />
		<Far />
	</Enum>

	<Enum name="combatSearchReason">
		<alert />
		<corpse />
		<crime />
		<failedPursuit />
		<generic />
		<shooter />
		<wakeUp />
		<woof />
	</Enum>

	<Enum name="combatState">

		<none />

		<confront />
		<customBehavior />
		<dialog />
		<fight />
		<flee />
		<frisk />
		<lookForShooter />
		<mercy />
		<moveToCrimeScene />
		<rally />
		<report />
		<search />
		<standDown />

	</Enum>

	<Enum name="combatStimulusKind">
		<aim />
		<alert />
		<carriedCorpse />
		<corpse />
		<criminal />
		<customBehaviorRequest />
		<frisk />
		<hit />
		<hostilePerception />
		<hotPerception />
		<information />
		<lockpick />
		<murder />
		<shotSeen />
		<skirmish />
		<sneak />
		<standDownRequest />
		<theft />
		<trespass />
		<unconsciousBody />
		<weapon />
	</Enum>

	<Enum name="combatMeleeDefenceKind">
		<noDefence />
		<normalBlock />
		<perfectBlock />
		<specialPerfectBlock />
		<dodge />
	</Enum>

	<Enum name="combatMeleeAttackKind">
		<noAttack />
		<normalAttack />
		<trick />
		<zoneChange />
	</Enum>

	<Enum name="weaponSet">
		<MeleeWeapon />
		<MissileWeapon />
		<AllWeapons />
	</Enum>

	<Enum name="combatBarkKind">
		<tauntingStrong/>
		<tauntingWeak/>
		<hitOpponentBig/>
		<failedAction/>
		<opponentWounded/>
		<opponentCritical/>
		<pause/>
		<pauseStrong/>
		<pauseWeak/>
		<swithToMissile/>
		<victorious/>
		<opponentFleeing/>
		<flee/>
		<givingUp/>
		<opponentDying/>
		<charge/>
	</Enum>

	<Enum name="relativeMotion">
		<undefined />
		<targetNotMoving />
		<targetRunningTowards />
		<targetRunningAway />
	</Enum>

	<Type name="informationData">

		<!-- Whether we treat this information as a crime attributable to Dude (i.e. soldiers will confront on sight) -->
		<Member name="isCrime" type="bool" />

		<!-- Whether we treat this information as a crime non-attributable to Dude (i.e. soldiers will investigate the area, but won't confront. -->
		<Member name="isUnattributedCrime" type="bool" />

		<!-- Whether this information produces a information stimulus in the standard manner -->
		<Member name="produceInformationStimulus" type="bool" />

		<!-- When produceInformationStimulus is set to <true>: -->
		<!-- Soldiers will always produce an information stimulus when within this distance -->
		<Member name="soldiersAlwaysRespondWithinDistance" type="float" />

		<!-- When produceInformationStimulus is set to <true>: -->
		<!-- Outside the automatic response range, soldiers will only produce an information stimulus when there are less then this number of responders -->
		<Member name="soldiersMaxResponderCount" type="int" />

		<!-- Civilians within this distance will auto react -->
		<Member name="civiliansAutoReactWithinDistance" type="float" />

		<!-- Civilians within this distance can react, based on the reaction limit counter -->
		<Member name="civiliansCanReactWithinDistance" type="float" />

		<!-- When NPCs check whether to react to this crime, the check will auto succeed in case there's less reactors than the 'reactorsAutoSuccessCount' value. -->
		<!-- When there's more, the base chance to react is: 1 - (additional reactor count) * reactorsChanceDecreasePerEachExtra. -->
		<Member name="reactorsAutoSuccessCount" type="int" />
		<Member name="reactorsChanceDecreasePerEachExtra" type="float" />

		<!-- Crime which will be resolved by circators -->
		<Member name="resolvedByCircators" type="bool" />
		
		<!-- Crime which is resolving only in monastery -->
		<Member name="isOnlyMonasteryCrime" type="bool" />

		<!-- Prefix of the record in the reputation_change table -->
		<Member name="reputationHitName" type="string" />

		<!-- When a soldier knows several kinds of crimes against the player, he will mention the one with the highest importance -->
		<Member name="importance" type="int" />

		<!-- How quick to move when the NPC runs towards the authority to report this information: 0 = Walk, 1 = Run, 2 = Sprint -->
		<Member name="reportMoveSpeed" type="int" />

		<!-- First bark metarole (said still in place) -->
		<Member name="reportMetaroleFirstBark" type="string" />

		<!-- Bark metarole while en route to report to the authorities -->
		<Member name="reportMetarole" type="string" />

		<!-- Whether the NPC always runs towards the authority when reporting (overrides the option to sometimes stand still and shout) -->
		<Member name="reportAlwaysMove" type="bool" />

		<!-- Fine punishment (G's) -->
		<Member name="fine" type="int" />

		<!-- Jail punishment (days)  -->
		<Member name="jail" type="int" />

		<!-- Whether punishing player for this crime forces a stolen items confiscation -->
		<Member name="confiscation" type="bool" />

		<!-- Game time seconds (0: no expiration) -->
		<Member name="expiration" type="int" />
	
		<!-- Set to <true> for crimes which do not have their own specific line in the confrontation dialog -->
		<Member name="useGenericLineInConfrontationDialog" type="bool" />
	
		<!-- Legalization of crime for the short time (int) -->
		<Member name="gracePeriod" type="int" />
		
		<!-- Maximum number of soldiers who can confront player for this crime -->
		<Member name="maxConfronters" type="int" />

	</Type>

	<Enum name="combatRallyBehaviorKind">

		<lookAround />
		<watchEntity />

	</Enum>

	<Enum name="combatFightReason">

		<unspecified />
		<confront />

	</Enum>

	<Type name="combat">

		<Type name="assaultVolumeData">

			<Member name="attacker" type="common:wuid" />
			<Member name="victim" type="common:wuid" />

			<Member name="kind" type="enum:combatAttackKind" />
			<Member name="victimKind" type="enum:assaultVictimKind" />

		</Type>

		<Type name="assaultInformation">

			<!-- Base -->
			<Member name="information" type="information" />

			<Member name="kind" type="enum:combatAttackKind" />
			<Member name="victimKind" type="enum:assaultVictimKind" />

		</Type>

		<Type name="attackParams">

			<Member name="attacker" type="common:wuid" />
			<Member name="target" type="common:wuid" />

			<!-- Respected only when the target is player -->
			<!-- Reflects who is the aggressor in the context that led to the fight: -->
			<!-- <true>: The player is the aggressor; <false>: The NPC is the aggressor -->
			<Member name="playerIsAggressor" type="bool" />

		</Type>

		<Type name="bark">

			<Member name="metarole" type="string" />
			<Member name="alias" type="string" />
			<Member name="lookAt" type="common:wuid" />
			<Member name="waitOnEnd" type="bool" />
			<Member name="showSubtitles" type="bool" />
			<Member name="defaultAnimState" type="enum:animationOverride">$enum:animationOverride.userControlled</Member>

		</Type>

		<Type name="barkModificator">
			<Member name="factor" type="float">1.0</Member>
			<Member name="speechRegime" type="enum:combatType" />
		</Type>

		<Type name="commonSkirmishParticipantLinkData">
		
			<Member name="timestamp" type="int64" />
		
		</Type>
		
		<Type name="fightOptions">
			<Member name="opponent" type="common:wuid" />
			<Member name="preferredWeaponKind" type="enum:weaponChange" />
			<Member name="combatResult" type="enum:combatEndingInfo" />
			<Member name="combatRegimeOverride" type="enum:combatTreeExecutionRegime" />
			<Member name="standStill" type="bool">false</Member>
			<Member name="guardByDrawnWeapon" type="bool">true</Member>
			<Member name="combatBarkModificator" type="combat:barkModificator" />
			<Member name="clearTempSuperfactionAgainstPlayer" type="bool">false</Member>
			<Member name="listener" type="common:wuid" />
			<Member name="startInDefenseOnly" type="bool" />
		</Type>

		<Type name="barkProbability">
			<Member name="tauntingStrong" type="float">0.15</Member>
			<Member name="tauntingWeak" type="float">0.07</Member>
			<Member name="hitOpponentBig" type="float">0.2</Member>
			<Member name="failedAction" type="float">0.1</Member>
			<Member name="opponentWounded" type="float">0.5</Member>
			<Member name="opponentCritical" type="float">0.5</Member>
			<Member name="pause" type="float">0.1</Member>
			<Member name="pauseStrong" type="float">0.1.2</Member>
			<Member name="pauseWeak" type="float">0.05</Member>
			<Member name="swithToMissile" type="float">0.2</Member>
			<Member name="victorious" type="float">0.5</Member>
			<Member name="opponentFleeing" type="float">0.8</Member>
			<Member name="flee" type="float">1.0</Member>
			<Member name="givingUp" type="float">0.8</Member>
			<Member name="opponentDying" type="float">0.5</Member>
			<Member name="charge" type="float">0</Member>
		</Type>

		<Type name="barkMetaroleName">
			<Member name="tauntingStrong" type="string">COMBAT_TAUNTING_STRONG</Member>
			<Member name="tauntingWeak" type="string">COMBAT_TAUNTING_WEAK</Member>
			<Member name="hitOpponentBig" type="string">COMBAT_HIT_OPPONENT</Member>
			<Member name="failedAction" type="string">COMBAT_FAILED_ACTION</Member>
			<Member name="opponentWounded" type="string">COMBAT_OPPONENT_WOUNDED</Member>
			<Member name="opponentCritical" type="string">COMBAT_OPPONENT_CRITICAL</Member>
			<Member name="pause" type="string">COMBAT_PAUSE</Member>
			<Member name="pauseStrong" type="string">COMBAT_PAUSE_STRONG</Member>
			<Member name="pauseWeak" type="string">COMBAT_PAUSE_WEAK</Member>
			<Member name="swithToMissile" type="string">COMBAT_MISSILE_ATTACK</Member>
			<Member name="victorious" type="string">COMBAT_VICTORIOUS</Member>
			<Member name="opponentFleeing" type="string">COMBAT_OPPONENT_FLEE</Member>
			<Member name="flee" type="string">COMBAT_FLEE</Member>
			<Member name="givingUp" type="string">COMBAT_GIVE_UP</Member>
			<Member name="opponentDying" type="string">COMBAT_OPPONENT_DYING</Member>
			<Member name="charge" type="string">COMBAT_CHARGE</Member>
		</Type>

		<Type name="combatEndingInfo">
			<Member name="state" type="enum:combatEndingInfo"/>
			<Member name="currentOpponent" type="common:wuid" />
		</Type>

		<Type name="lastHitByPlayer">

			<Member name="kind" type="enum:combatAttackKind" />
			<Member name="time" type="int64" />

		</Type>

		<Type name="confrontParams">

			<Member name="immediate" type="bool" />

			<!-- If 'immediate' is <true>, then this contains the crime that the NPC caught the player doing -->
			<Member name="information" type="information" />

		</Type>

		<Type name="confrontationFeedback">

			<!-- 'fight' / 'fine' / 'flee' / 'jail' -->
			<Member name="action" type="string" />

		</Type>

		<Type name="customBehaviorParams">

			<Member name="behaviorSource" type="common:wuid" />
			<Member name="behaviorName" type="string" />

			<Member name="includeXml" type="string" />
			<Member name="includeTree" type="string" />

			<Member name="suppressStimuli" type="bool" />

			<!-- Contextual to the actual behavior -->
			<Member name="entity" type="common:wuid" />

			<Member name="bool1" type="bool" />
			<Member name="bool2" type="bool" />
			<Member name="bool3" type="bool" />
			<Member name="bool4" type="bool" />

			<Member name="int1" type="int" />
			<Member name="int2" type="int" />
			<Member name="int3" type="int" />
			<Member name="int4" type="int" />

			<Member name="string1" type="string" />
			<Member name="string2" type="string" />
			<Member name="string3" type="string" />
			<Member name="string4" type="string" />

			<Member name="wuid1" type="common:wuid" />
			<Member name="wuid2" type="common:wuid" />
			<Member name="wuid3" type="common:wuid" />
			<Member name="wuid4" type="common:wuid" />

		</Type>

		<Type name="dialogParams">

			<!-- Forwarded from the confrontParams -->
			<Member name="immediate" type="bool" />
			<Member name="information" type="information" />

		</Type>

		<Type name="fightParams">

			<Member name="opponent" type="common:wuid" />

			<!-- ... -->
			<Member name="reason" type="enum:combatFightReason" />

			<!-- For reason 'confront', this contains details about the confrontation, so that we can use it to start the dialog from fight as well: -->
			<Member name="confront_immediate" type="bool" />
			<Member name="confront_information" type="information" />

			<!-- Whether we should only defend until the attacker attacks us again -->
			<Member name="startInDefenseOnly" type="bool" />
			
			<!-- Forces drawing weapon -->
			<Member name="forceDrawWeapon" type="bool" />
			
			<!-- Never surrender -->
			<Member name="neverSurrender" type="bool" />

		</Type>

		<Type name="friskFeedback">

			<!-- 'run' / 'x' / -->
			<Member name="action" type="string" />

		</Type>

		<Type name="fleeParams">

			<!-- Priorities: -->
			<!-- 1/ 'wherever' == true: Flee no matter in which direction -->
			<!-- 2/ 'entityToFleeFrom' ~= null: Flee from the particular entity -->
			<!-- 3/ Flee from 'posToFleeFrom' -->

			<Member name="wherever" type="bool" />
			<Member name="entityToFleeFrom" type="common:wuid" />
			<Member name="posToFleeFrom" type="common:vec3" />

			<Member name="barkMetarole" type="string" />

		</Type>
		
		<Type name="fleeFromNPCParams">
		
			<Member name="chasingNPC" type="common:wuid" />
			<Member name="distance" type="float">150.0</Member>
			<Member name="changeChasingNPC" type="common:wuid" />

		</Type>

		<Type name="friskParams">

			<Member name="_" type="bool" />

		</Type>

		<Type name="hotEntity">

			<Member name="entity" type="common:wuid" />

			<!-- Whether the hotness cools down overtime -->
			<Member name="coolsDown" type="bool" />

			<!-- Current cooldown (N/A when !coolsDown) -->
			<Member name="cooldown" type="int" />

			<!-- Reason -->
			<Member name="reason" type="enum:combatHotnessReason" />

			<!-- For ShooterAtFriend reason, this contains the entity that the hot entity shot at -->
			<Member name="entityDetail" type="common:wuid" />
			
			<!-- Created timestamp -->
			<Member name="timestamp" type="int64" />

		</Type>

		<Type name="lookForShooterParams">

			<Member name="shooter" type="common:wuid" />
			<Member name="victim" type="common:wuid" />
			<Member name="turnTowardsShooter" type="bool" />

		</Type>

		<Type name="mercyParams">

			<Member name="opponent" type="common:wuid" />

			<!-- Whether the NPC will make use of the time when player is stealing the weapon and flee -->
			<Member name="checkWeaponSteal" type="bool">true</Member>
			
			<!-- Whether the NPC will check its morale and fight/flee when it recovers back to a higher value -->
			<Member name="checkMorale" type="bool">true</Member>

			<!-- Whether the NPC will flee when the player has moved far enough -->
			<Member name="checkDistance" type="bool">true</Member>

			<!-- Whether the NPC will flee when the player is looking away -->
			<Member name="checkDudeOrientation" type="bool">true</Member>

			<!-- Override default distance; -1: do not override (irrelevant when checkDistance is <false>) -->
			<Member name="dudeDistanceLimit" type="float">-1</Member>
			
			<!-- Whether the NPC will have combatMercyOutcome dialog enabled. If true the NPC will switch from mercy based on the other checks. -->
			<Member name="suppressDialog" type="bool">false</Member>

		</Type>

		<Type name="moveToCrimeSceneParams">

			<Member name="information" type="information" />

		</Type>

		<Type name="playerAttackNearMiss">

			<Member name="attacker" type="common:wuid" />

		</Type>

		<Type name="pursuitState">
		
			<Member name="victim" type="common:wuid" />
			<Member name="active" type="bool" />
			
		</Type>

		<Type name="rallyParams">

			<Member name="behavior" type="enum:combatRallyBehaviorKind">$enum:combatRallyBehaviorKind.lookAround</Member>

			<!-- For 'lookAround' behavior -->
			<Member name="turnAroundOnStart" type="bool" />

			<!-- For 'watchEntity' behavior -->
			<Member name="watchedEntity" type="common:wuid" />

		</Type>
		
		<Type name="registerToCombat">

			<Member name="time" type="int64" />

		</Type>

		<Type name="reportParams">

			<Member name="information" type="information" />

		</Type>

		<Type name="searchParams">

			<Member name="reason" type="enum:combatSearchReason" />

			<!-- Valid when the reason is alert/corpse/crime/wakeUp -->
			<Member name="information" type="information" />

			<!-- Valid when the reason is Shooter -->
			<Member name="shooter" type="common:wuid" />

			<!-- Valid when the reason is door/failedPursuit/generic/shooter/woof -->
			<Member name="pos" type="common:vec3" />

		</Type>

		<Type name="standDownParams">

			<Member name="_" type="bool" />

		</Type>

		<Type name="status">
			
			<!-- Timestamp of when we last left the 'fight' tree -->
			<Member name="lastInFightTime" type="int64">-1</Member>
			
			<!-- Whether we're in the 'fight' tree -->
			<Member name="inFight" type="bool" />
		
		</Type>
		
		<Type name="stimulus">

			<!-- Common -->

			<Member name="haltSpeed" type="enum:daycycleHaltSpeed">$enum:daycycleHaltSpeed.fast</Member>

			<!-- Stimuli kinds -->

			<Type name="aim">

				<Member name="attacker" type="common:wuid" />

			</Type>

			<Type name="alert">

				<Member name="information" type="information" />

			</Type>

			<Type name="corpse">

				<Member name="information" type="information" />

			</Type>

			<Type name="carriedCorpse">

				<Member name="information" type="information" />

			</Type>


			<Type name="criminal">

				<Member name="_" type="bool" />

			</Type>

			<Type name="customBehaviorRequest">

				<!-- If 'behaviorName' is set, call a behavior -->
				<Member name="behaviorSource" type="common:wuid" />
				<Member name="behaviorName" type="string" />

				<!-- If 'behaviorName' is blank, include an XML tree -->
				<Member name="includeXml" type="string" />
				<Member name="includeTree" type="string" />

				<!-- Whether all other combat stimuli are suppressed while in the custom behavior -->
				<Member name="suppressStimuli" type="bool">true</Member>

				<!-- Contextual to the actual behavior -->
				<Member name="entity" type="common:wuid" />

				<Member name="bool1" type="bool" />
				<Member name="bool2" type="bool" />
				<Member name="bool3" type="bool" />
				<Member name="bool4" type="bool" />

				<Member name="int1" type="int" />
				<Member name="int2" type="int" />
				<Member name="int3" type="int" />
				<Member name="int4" type="int" />

				<Member name="string1" type="string" />
				<Member name="string2" type="string" />
				<Member name="string3" type="string" />
				<Member name="string4" type="string" />

				<Member name="wuid1" type="common:wuid" />
				<Member name="wuid2" type="common:wuid" />
				<Member name="wuid3" type="common:wuid" />
				<Member name="wuid4" type="common:wuid" />

			</Type>

			<Type name="frisk">

				<Member name="_" type="bool" />

			</Type>

			<Type name="hit">

				<Member name="attacker" type="common:wuid" />
				<Member name="kind" type="enum:combatAttackKind" />

				<!-- Whether the "hit" was actually a near miss that we treat as a hit -->
				<Member name="real" type="bool" />

			</Type>

			<Type name="hostilePerception">

				<Member name="perceptible" type="common:wuid" />

			</Type>

			<Type name="hotPerception">

				<Member name="perceptible" type="common:wuid" />

			</Type>

			<Type name="information">

				<Member name="information" type="information" />

			</Type>

			<Type name="lockpick">

				<Member name="information" type="information" />

			</Type>

			<Type name="murder">

				<Member name="information" type="information" />

			</Type>

			<Type name="shotSeen">

				<Member name="shooter" type="common:wuid" />
				<Member name="victim" type="common:wuid" />

			</Type>

			<Type name="skirmish">

				<!-- ... -->
				<Member name="target" type="common:wuid" />

				<!-- ... -->
				<Member name="isDudeInvolved" type="bool" />

				<!-- ... -->
				<Member name="information" type="information" />
				
				<!-- ... -->
				<Member name="outOfLimit" type="bool">false</Member>

			</Type>

			<Type name="sneak">

				<Member name="information" type="information" />

			</Type>

			<Type name="standDownRequest">

				<Member name="_" type="bool" />

			</Type>

			<Type name="theft">

				<Member name="information" type="information" />

			</Type>

			<Type name="trespass">

				<Member name="area" type="common:wuid" />

			</Type>
			
			<Type name="unconsciousBody">

				<Member name="entity" type="common:wuid" />

			</Type>

			<Type name="weapon">

				<Member name="information" type="information" />

			</Type>

		</Type>

		<Type name="stimulusImpulse">

			<Member name="stimulusKind" type="enum:combatStimulusKind" />
			<Member name="stimulusName" type="string" />

		</Type>

		<Type name="stimulusReactionOverride">

			<Member name="add" type="bool" />
			<Member name="handle" type="string" />

			<Member name="stimulusKind" type="enum:combatStimulusKind" />

			<Member name="condition" type="callback" />
			<!-- override member is obsolete, present due to save load compatibility -->
			<Member name="override" type="callback" />
			
			<Member name="customBehavior" type="combat:stimulus:customBehaviorRequest" />
			
		</Type>

		<Type name="mercy">

			<Type name="dialogResult">

				<Member name="outcome" type="enum:combatMercyOutcome" />

			</Type>
			
			<Type name="weapon">

				<Member name="hand" type="enum:hand" />
				<Member name="initPos" type="common:vec3" />
				
				<!-- not part of the link data, used for clearer API -->
				<Member name="weapon" type="common:wuid" />
				
			</Type>
			
			<Type name="pickWeapon">
				<Type name="params">
				
					<Member name="move" type="bool">true</Member>
				
				</Type>
			</Type>
			
			<Type name="dropWeapon">
				<Type name="params">
				
					<Member name="disablePhysics" type="bool">true</Member>
					<Member name="waitForDrop" type="bool">false</Member>
				
				</Type>
			</Type>

		</Type>

		<Type name="subbrain">

			<Type name="stop">

				<Member name="_" type="bool" />

			</Type>

		</Type>

		<Type name="surrenderCooldown">

			<Member name="expiration" type="int64" />

		</Type>

		<Type name="hit">

			<Member name="attacker" type="common:wuid" />
			<Member name="strength" type="int" />
			<Member name="hitType" type="enum:HitReactionType" />

			<!-- <true> means that the NPC was actually physically hit; <false> means that the player has tried to hit, but missed -->
			<Member name="real" type="bool" />

		</Type>

		<Type name="comboAttacks">
			<Member name="comboID" type="int">-1</Member>
			<Member name="zone" type="int">-1</Member>
			<Member name="type" type="int">-1</Member>
			<Member name="step" type="int">-1</Member>
		</Type>

		<Type name="skills">
			<Member name="sword" type="int">0</Member>
			<Member name="bow" type="int">0</Member>
			<Member name="fencing" type="int">0</Member>
			<Member name="defense" type="int">0</Member>
		</Type>

		<Type name="stats">

			<!-- Styl utoku NPC. Defenzivni (0), neutralni (0.5) a aggresivni (1) -->
			<Member name="attackStyle" type="float">1</Member>

			<Member name="skills" type="combat:skills" />

			<!-- attack style chances -->
			<Member name="comboChance" type="float">0.5</Member>
			<Member name="aggressiveClinchChance" type="float">0.8</Member>
			<Member name="lightAttackChance" type="float">0.3</Member>
			<Member name="normalAttackChance" type="float">0.65</Member>
			<Member name="trickChance" type="float">0.2</Member>
			<Member name="zoneChangeChance" type="float">0.15</Member>
			<!-- random movement probability -->
			<Member name="randMoveChance" type="float">0.5</Member>
			<!-- defence style chances -->
			<Member name="riposteChance" type="float">0.8</Member>
			<Member name="normalBlockChance" type="float">0.25</Member>
			<Member name="perfectBlockChance" type="float">0.15</Member>
			<Member name="specialPerfectBlockChance" type="float">0.05</Member>
			<Member name="dodgeChance" type="float">0.25</Member>
			<Member name="noDefenceChance" type="float">0.35</Member>
			<!-- waits and delays some must be integers some must be strings depending on node use-->
			<Member name="postReadyToStrikeWait" type="string">500</Member>
			<Member name="postZoneChangeWait" type="string">400</Member>
			<Member name="trickWait" type="string">700</Member>
			<Member name="postStrikeWait" type="int">500</Member>
			<Member name="postComboWait" type="int">10000</Member>
			<Member name="randomMoveWait" type="string">600</Member>
			<Member name="preReblockWait" type="int">500</Member>
			<Member name="weaponSwitchWait" type="string">5000</Member>
		</Type>

		<Type name="order">
			<Member name="reason" type="string"/>
			<Type name="retarget">
				<Member name="newEnemyId" type="common:wuid"/>
				<Member name="forcedWeapon" type="enum:weaponChange"/>
				<Member name="stationaryShooting" type="bool"/>
			</Type>
			<Type name="quickTarget">
				<Member name="target" type="common:wuid"/>
			</Type>
			<Type name="movementControl">
				<Member name="state" type="enum:combatMovementControl"/>
				<Member name="movementScale" type="enum:combatMovementScale">$enum:combatMovementScale.unchanged</Member>
			</Type>
			<Type name="movement">
				<Member name="state" type="enum:combatMovementMode"/>
				<Member name="override" type="bool">false</Member>
			</Type>
			<Type name="changeWeapon">
				<Member name="state" type="enum:weaponChange" />
			</Type>
			<Type name="bark">
				<Member name="combatBarkKind" type="enum:combatBarkKind" />
			</Type>
			<Type name="changeGuard">
				<Member name="state" type="enum:combatGuardState" />
				<Member name="randomZone" type="bool">true</Member>
			</Type>
			<Type name="freeBlock">
				<Member name="state" type="enum:combatBlockState" />
			</Type>
			<Type name="attackStop"/>
			<Type name="attackStart"/>
			<Type name="defenseStop"/>
			<Type name="defenseStart"/>
			<Type name="enemyFarAway"/>
			<Type name="restrictWeaponKind">
				<Member name="state" type="enum:weaponChange" />
			</Type>
			<Type name="rally"/>
			<Type name="flee"/>
			<Type name="win">
				<Member name="target" type="common:wuid" />
			</Type>
		</Type>

		<Type name="state">
			<Type name="subscription">

				<Type name="request">

					<Member name="unsubscribe" type="bool">false</Member>
					<Member name="once" type="bool">true</Member>
					<Member name="callback" type="common:wuid" />

					<!-- exclusive properties: priority as follows -->
					<Member name="everyState" type="bool">false</Member>
					<Member name="state" type="enum:combatState"/>

				</Type>

				<Type name="subscription">

					<Member name="once" type="bool">true</Member>
					<Member name="callback" type="common:wuid" />
					<Member name="everyState" type="bool">false</Member>
					<Member name="state" type="enum:combatState"/>

				</Type>

				<Type name="event">

					<Member name="state" type="enum:combatState"/>

				</Type>

			</Type>
		</Type>

	</Type>

	<Enum name="combatMercyOutcome">

		<none />
		<exitCombat /> <!-- rename to takeWeaponAndExitCombat -->
		<takeWeaponAndLeave />
		<leaveWeaponAndLeave />
		<leaveValuablesAndLeave />
		<fight />

	</Enum>
	
	<Enum name="combatMercyState">

		<waitingForDialog value="0" />
		<fight /> 
		<flee />
		<exitCombat />
		<closing />

	</Enum>

	<Type name="casteOverride">
	
		<Type name="request">
			<!-- caste will be reset from default -->
			<Member name="reset" type="bool">false</Member>
			
			<Member name="caste" type="enum:caste" />

		</Type>
		
		<Type name="storage">
			
			<Member name="caste" type="enum:caste" />
			
		</Type>
		
	</Type>
	<!--****************************** CRIME ********************************-->

	<Enum name="caste">
		<undefined value="0" />
	
		<!-- Will never act against player -->
		<bestFriend />

		<!-- Basic -->
		<normal />

		<!-- NPCs will not act against player for acting against these -->
		<unpopular />

		<!-- NPCs will assist player in acting against these -->
		<hated />
	</Enum>
	
	<Enum name="crimeReportAction">
		<none />
		<reportToSoldier />
		<reportToCircator />
		<spawnMonasterySoldiers />
		<ringTheBell />
	</Enum>

	<Enum name="crimeResult">
		<none />
		<fine />
		<jail />
		<skillCheck />
		<fight />
	</Enum>

	<Enum name="corpseState">

		<undiscovered />
		<discovered />
		<watched />

	</Enum>

	<!-- IDs have to correspond to the soul_crime_role table -->
	<Enum name="crimeSystemRole">

		<none value="0" />
		<civilian value="1" />
		<soldier value="2" />
		<renegade value="3" />
		<monk value="4" />
		<circator value="5" />

	</Enum>

	<Enum name="confiscateItemsMode">

		<none />
		<actor />
		<worldStash />

	</Enum>

	<Enum name="dudeExpectationLevel">

		<!-- We do not expect dude at all -->
		<none />

		<!-- We do not expect dude ourselves, but our area-mate does -->
		<transitive />

		<!-- We expect dude -->
		<expected />

	</Enum>

	<Enum name="theftKind">

		<unknown />
		<pickUp />
		<loot />
		<pickpocket />
		<horse />
		<grave />

	</Enum>

	<Type name="crime">

		<Type name="confiscateItemsParams">

			<Member name="mode" type="enum:confiscateItemsMode" />

			<!-- For 'actor' mode: -->
			<Member name="actor" type="common:wuid" />

		</Type>

		<Type name="friskLinkData">

			<Member name="nextFrisk" type="int64" />

		</Type>

		<Type name="itemToConsficate">

			<Member name="item" type="common:wuid" />
			<Member name="source" type="common:wuid" />
			<Member name="savedByHiddenPocketPerk" type="bool">false</Member>

		</Type>

		<Type name="jailHandleOverride">

			<Type name="request">

				<Member name="handler" type="common:wuid" />
				<Member name="throttleEventsThroughLink" type="bool" />

			</Type>

			<Type name="event">

				<Member name="_" type="bool" />

			</Type>

		</Type>

		<Type name="lootLinkExtraData">

			<!-- In [G/10] -->
			<Member name="value" type="int" />

		</Type>

		<Type name="playerJailRequest">

			<Member name="days" type="int" />

		</Type>

		<Type name="punishment">

			<!-- <true>: Dude can choose to pay the fine; <false>: Jail only -->
			<Member name="canPayFine" type="bool" />

			<!-- In G/10 -->
			<Member name="fine" type="int" />

			<!-- In days -->
			<Member name="jail" type="int" />

			<!-- Whether we'll confiscate stolen items -->
			<Member name="confiscation" type="bool" />

		</Type>

		<Type name="reportDestination">

			<Type name="request">

				<Member name="action" type="enum:crimeReportAction" />

			</Type>

			<Type name="result">

				<Member name="destination" type="common:wuid" />

			</Type>

		</Type>

		<Type name="resolutionSubscription">
			<Member name="event" type="enum:crimeResult"/>
		</Type>

		<Type name="scanForItemsToConfiscateParams">

			<Member name="useHiddenPocketsPerk" type="bool" />

		</Type>

		<Type name="spawnRobberyVolumeParams">

			<!-- Position to spawn the volume at -->
			<Member name="pos_wuid" type="common:wuid" />

			<!-- Used when 'pos_wuid' is <null> -->
			<Member name="pos_vec3" type="common:vec3" />

			<!-- In [G/10] -->
			<Member name="value" type="int" />

			<!-- ... -->
			<Member name="kind" type="enum:theftKind" />

			<!-- ... -->
			<Member name="victim" type="common:wuid" />

			<!-- Volume expiration -->
			<Member name="expiration" type="string">6s</Member>

		</Type>

		<Type name="subscription">
		
			<Member name="combatState" type="enum:combatState" />

		</Type>

		<Type name="suppressAssaultReactions">

			<Member name="suppressHostilePerception" type="bool">true</Member>
			<Member name="suppressExternalReactions" type="bool">true</Member>
			<Member name="suppressReputationHit" type="bool">true</Member>
			<Member name="suppressReputationPrevent" type="bool">true</Member>
			
			<!-- Deprecated: can be removed as soon as we can remove members -->
			<Member name="suppressStimulus" type="bool">true</Member>
			
			<Member name="suppressHitStimulus" type="bool">true</Member>
			<Member name="suppressAimStimulus" type="bool">true</Member>

			<Member name="invalidForPlayerWithWeapon" type="bool">false</Member>
			
			<Member name="expiration" type="int64">-1</Member>

		</Type>

		<Type name="theftExPostVolumeData">

			<Member name="createdTime" type="int" />
			<Member name="duration" type="int" />

		</Type>

		<Type name="theftInformationUpdateSubscription">

			<Member name="information" type="information" />
			<Member name="lootedEntity" type="common:wuid" />

		</Type>

		<Type name="robberyVolumeData">

			<!-- ... -->
			<Member name="kind" type="enum:theftKind" />

			<!-- In [G/10] -->
			<Member name="value" type="int" />

			<!-- ... -->
			<Member name="victim" type="common:wuid" />

		</Type>
		
		<!-- end times of grace period -->
		<Type name="gracePeriods">
			<Member name="trespass" type="int64">-1</Member>
			<Member name="sneak" type="int64">-1</Member>
		</Type>
		
		<Type name="violentConfrontationData">
		
			<Member name="lastCooldownStart" type="int64">-1</Member>
		
		</Type>

	</Type>

	<!--****************************** SOUND ********************************-->

	<Enum name="soundReaction">

		<none />
		<turn />
		<move />

	</Enum>

	<Type name="sound">

		<Type name="reactionPatchData">

			<Member name="sound" type="hearingInfo" />
			<Member name="reaction" type="enum:soundReaction" />

			<!-- Relevant only for lockpicking sounds: The lock that the player is picking -->
			<Member name="lock" type="common:wuid" />

		</Type>

	</Type>

	<!--****************************** DOG ********************************-->

	<Type name="dog">

		<Type name="reactionPatchData">

			<Member name="information" type="information" />

		</Type>

	</Type>

	<!--****************************** INFORMATIONS ********************************-->

	<Type name="information">

		<Type name="created">
			<Member name="information" type="information" />
		</Type>

	</Type>
	
	<!--****************************** PICKPOCKET ********************************-->
	
	<Type name="pickpocket">
	
		<Type name="subscription">
		
			<Type name="event">
			
				<Member name="event" type="enum:pickpocketEvent"/>
				
			</Type>
			
		</Type>
	
	</Type>

	<!--****************************** DIALOG TYPE DEFINITIONS  ***********************************-->
	<!-- duplicate of code enum E_AnimationOverride -->
	<!--Enum name="animationOverride">
	<userControlled value="0"/>
	<dialogControlled value="1"/>
	<noOverride value="2"/>
</Enum-->

	<Enum name="dialogPreset">
		<default />
		<forcedOnPlayer />
		<!--noTurnBody,!moveToTarget,!enableGreeting,!enableEnding,!waitOnReceiverDialogEnd-->
		<npcToNpcNoApproach />
		<!--noTurnBody,!moveToTarget,!suspendRecievers-->
	</Enum>

	<Enum name="dialogResult">
		<undefined />
		<timeout />
		<refusedByReceiver />
		<invalidDialog />
		<interruptedDialog />
		<success />
	</Enum>


	<Type name="dialog">

		<Type name="status">
			<Member name="dlgWithoutAnimations" type="bool">false</Member>
			<Member name="dlgRequest" type="dialogModule:onDialogRequest" />
		</Type>
		<Type name="requestDone">
			<Member name="reqId" type="int">0</Member>
		</Type>
		<Type name="parameters">
			<Member name="defaultAnimState" type="enum:animationOverride">$enum:animationOverride.noOverride</Member>
			<Member name="animFragment" type="string" />
			<Member name="animTag" type="string" />
			<Member name="noTurnBody" type="bool">false</Member>
			<Member name="noInterrupt" type="bool">false</Member>
			<Member name="useTwinsAsReceiver" type="bool">true</Member>
			<Type name="initiator">
				<Member name="isForcedDialog" type="bool">false</Member>
				<Member name="enableGreeting" type="bool">true</Member>
				<Member name="enableEnding" type="bool">true</Member>
				<Member name="metarole" type="string" />
				<Member name="topicId" type="int">0</Member>
				<Member name="alias" type="string"/>
				<Member name="lookAtId" type="common:wuid" />
				<Member name="once" type="bool">false</Member>
				<Member name="isInterruptibleByPlayer" type="bool">true</Member>
				<Member name="moveToTarget" type="bool">true</Member>
				<Member name="sendPrerequest" type="bool">false</Member>
				<Member name="bruteForceDialogOnPlayer" type="bool">false</Member>
				<Member name="useTwinsAsInitiator" type="bool">true</Member>
				<Member name="waitOnReceiverDialogEnd" type="bool">true</Member>
				<Member name="suspendRecievers" type="bool">true</Member>
				<Member name="allowPositioning" type="bool">true</Member>
				<Member name="dialogPreset" type="enum:dialogPreset">$enum:dialogPreset.default</Member>
			</Type>
		</Type>
		<Type name="monologRequest">
			<Member name="topicId" type="int">0</Member>
			<Member name="alias" type="string"/>
			<Member name="metarole" type="string" />
			<Member name="forceSubtitles" type="bool">false</Member>
			<Member name="priority" type="int">0</Member>
			<Member name="canBeDelayed" type="bool">false</Member>
			<Member name="sendAnswer" type="bool">false</Member>
			<Member name="overrideContextSuppress" type="bool">false</Member>
			<Member name="lookAtId" type="common:wuid" />
			<Member name="defaultAnimState" type="enum:animationOverride">$enum:animationOverride.userControlled</Member>
		</Type>
		<Type name="onComplete">
			<Member name="state" type="bool">false</Member>
		</Type>
		<Type name="onPrerequest">
			<Member name="state" type="bool">true</Member>
		</Type>
		
		<Type name="placeBody">
			<member name="now" type="bool">true</member>
		</Type>

		<!-- Communication between dialog in Skald and a quest smart object. -->
		<Type name="state">
			<Member name="state" type="string" />
			<Member name="result" type="string" />
			<Member name="id" type="common:wuid" />
		</Type>
	</Type>

	<!--****************************** MINIGAMES  ***********************************-->

	<Enum name="pickpocketEvent">
		<failedWithoutAnythingStolen />
		<failed />
		<success />
	</Enum>

	<Type name="minigame">

		<Type name="pickpocket">
			<Member name="event" type="enum:pickpocketEvent">0</Member>
			<Member name="stolenItemPrice" type="int">0</Member>
		</Type>

		<Type name="holedigging">
			<Member name="posX" type="float" />
			<Member name="posY" type="float" />
			<Member name="posZ" type="float" />
		</Type>
		
		<Type name="stop">
		
			<Member name="alchemy" type="bool">true</Member>
			<Member name="bookTranscription" type="bool">true</Member>
			<Member name="dice" type="bool">true</Member>
			<Member name="herbGathering" type="bool">true</Member>
			<Member name="holedigging" type="bool">true</Member>
			<Member name="lockpicking" type="bool">true</Member>
			<Member name="pickpocketing" type="bool">true</Member>
			<Member name="reading" type="bool">true</Member>
			<Member name="sharpening" type="bool">true</Member>
		
		</Type>
		
	</Type>



		<!--****************************** TUTORIAL TYPES  ***********************************-->
	<Type name="tutorial">

		<Type name="huntAttack">
			<Member name="isAvailable" type="bool" />
		</Type>

		<Type name="onAlchemy">
			<Member name="State" type="bool">true</Member>
		</Type>

		<Type name="onAlchemyItemUsed">
			<Member name="Item" type="int">0</Member>
		</Type>

		<Type name="onAlchemyRecipeLoaded">
			<Member name="Recipe" type="int">0</Member>
		</Type>

		<Type name="onAlchemyPotionCreated">
			<Member name="Potion" type="common:wuid" />
		</Type>

		<Type name="lockPicking">
			<!-- 0-start, 1-fail, 2-success, 3-stop 4-success after fail (perk) -->
			<Member name="State" type="int">0</Member>
		</Type>

		<Type name="onLockPickingTolerance">

			<!-- 0-in, 1-out -->
			<Member name="State" type="int">0</Member>

		</Type>

		<Type name="onOpenedWithKey">
			<Member name="Item" type="string"/>
		</Type>

		<Type name="onOpenedUnlocked">
			<Member name="Item" type="string"/>
		</Type>

		<Type name="onCombatTutorial">
			<Member name="name" type="string"/>
			<Member name="done" type="bool">false</Member>
		</Type>

		<Type name="onTutorialControl">
			<Member name="type" type="enum:tutorialControl"/>
		</Type>

		<Type name="onAlchemyUse">
			<Member name="_" type="bool" />
		</Type>

		<Type name="onBookOpen">
			<Member name="_" type="bool" />
		</Type>

		<Type name="onGrindstoneUse">
			<Member name="_" type="bool" />
		</Type>		

		<!-- TOHLE SMAZAT JE TO SHIT (JAntos) -->
		<Type name="tutorialMessage">
		   <Member name="name" type="string"/>
		   <Member name="ui" type="string"/>
		   <Member name="perk" type="string"/>
		   <Member name="visTime" type="float">15.0</Member>
		   <Member name="syncWithDialogue" type="bool">false</Member>
		</Type>

		<Type name="data">
			<Member name="isOverlay" type="bool"/>
			<Member name="overlayName" type="string"/>
			<Member name="contentStringName" type="string"/>
			<Member name="perk" type="string"/>
			<Member name="showDuration" type="float" />
			<Member name="syncWithDialog" type="bool" />
			<Member name="forceTutorial" type="bool"/>
			<Member name="isEmpty" type="bool"/>
			<Member name="repetitions" type="int"/>
			<Member name="cooldown" type="string"/>
			<Member name="nextShow" type="int64"/>
		</Type>

	</Type>

	<Enum name="tutorialControl">
		<resetAll/>
		<hideAll/>
	</Enum>

	<Enum name="tutorialKind">
		<bleeding />
		<callHorse />
		<lockpicking />
		<mountHorse />
		<move />
		<objectives />
		<quests />
		<reputation />
		<save />
		<stats />
		<stealing />
		<stealth />
		<tresspassing />
	</Enum>

	<Enum name="lockPicking">
		<start />
		<fail />
		<success />
		<stop />
		<successAfterFail />
	</Enum>

	<!--****************************** RPG MODULE TYPES  ***********************************-->

	<!-- This must mirror the buff_ai_tag table -->
	<Enum name="buffTagId">
		<alcohol_mood value="0"/>
		<alcohol_drunk value="1"/>
		<alcohol_blackout value="2"/>
		<poison value="3"/>
		<bleed value="4"/>
		<sleep value="5"/>
		<overeat value="6"/>
		<injury value="7"/>
		<savegame value="8"/>
	</Enum>

	<Type name="buffData">
		<Member name="name" type="string"/>
		<member name="id" type="enum:buffTagId" />
		<Member name="cure" type="bool">false</Member>
		<Member name="cureBehavior" type="string"/>
		<Member name="cureBehaviorFallback" type="string"/>
		<Member name="cureSleep" type="bool">true</Member>
		<Member name="priority" type="int">0</Member>
	</Type>


	<Type name="rpgModule">
		<Type name="buffTagChanged">
			<member name="tagId" type="enum:buffTagId" />
			<Member name="add" type="bool" />
		</Type>
	</Type>

	<!-- Mirror E_ActorGender -->
	<Enum name="humanGender">
		<male value="0" />
		<female value="1" />
		<child value="2" />
		<notDefined value="3" />
	</Enum>

	<!--****************************** QUEST MODULE TYPES  ***********************************-->
	<Type name="questModule">
		<Type name="questActor">
			<Member name="GUID" type="common:wuid" />
			<Type name="questState">
				<Member name="State" type="enum:QuestState"/>
				<!-- enum: QuestState -->
			</Type>
		</Type>
		<Type name="onQuest">
			<Member name="State" type="enum:QuestState"/>
		</Type>
		<Type name="onObjective">
			<Member name="State" type="enum:ObjectiveState"/>
			<Member name="ObjectiveId" type="int">0</Member>
			<Member name="ObjectiveName" type="string" />
		</Type>
		<Type name="onStep">
			<Member name="ObjectiveId" type="int">0</Member>
			<Member name="StepId" type="int">0</Member>
		</Type>
		<Type name="onItemDelivered">
			<Member name="Item" type="common:wuid" />
			<Member name="Count" type="int">0</Member>
		</Type>
		<Type name="onItemDeliveryCanceled">
		</Type>
		<Type name="onRewardChosen">
		</Type>
		<Type name="onNewGame">
			<Member name="isProfilerOn" type="bool">false</Member>
			<Member name="runStory" type="bool">true</Member>
		</Type>
	</Type>

	<Type name="quest">
		<Member name="name" type="string" />
		<Type name="itemWasFound">
			<Member name="state" type="bool" />
		</Type>
		<Type name="itemWasLost">
			<Member name="state" type="bool" />
		</Type>
	</Type>
	<!--****************************** HORSE SIGNALS TYPES  ********************************-->
	<Enum name="HorseCommands">
		<Halt value="0" />

		<ComeToMe />
		<SetPlayerHorse />
		<ClearPlayerHorse />

		<CreateFormation />

		<!-- Ride = move with a rider -->
		<RidePoint />
		<RidePointExact />
		<RideWaypoints />
		<RideHome />
		<RidePath />
		<RideInFormation />

		<!-- GoTo = move without a rider -->
		<GoToPoint />
		<GoToPointExact />
		<GoToWaypoints />
		<GoToHome />
		<GoToPath />
		<GoInFormation />

		<Eat />
		<OnLead />
		<!-- Switches horse to lead mode, where horse is following the sender -->

		<CustomBehavior />

		<!-- Reserves horse -->
		<Reserve />
		<ReserveRelease />

		<OnMount />
		<!-- sent in subbrain -->
		<OnDismount />
		<!-- sent in subbrain -->

		<!-- Change speed -->
		<Walk />
		<Run />
		<Sprint />
		<Dash/>

		<!-- Automatic move: Set player horse speed -->
		<Autopilot_Walk />
		<Autopilot_Run />
		<Autopilot_Sprint />
		<Autopilot_Dash/>

	</Enum>

	<Enum name="HorseResponces">
		<None value="-1" />
		<DestinationReached value="1" />
		<Halt />
		<WontFollow /> <!-- Used as response for OnLead-->
		<WillFollow /> <!-- Used as response for OnLead-->
		<RunHarmed />
		<Available />
		<NotAvailable />
		<StolenByPlayer />
		<RepeatRequest />
		<AbortRide />

		<ForceDismount /> <!-- obsolete -->
		<!-- dismount/hitreaction responce from brain to behaviour -->
	</Enum>

	<Enum name="HorseSpeed">
		<Walk value="0" />
		<Run value="1"/>
		<Sprint value="2"/>
		<Dash value="3"/>
	</Enum>

	<Enum name="HorseMoveMode">
		<Point />
		<PointExact />
		<Waypoints />
		<Path />
		<Home />
		<Formation />
		<BeeingLead />
	</Enum>

	<Enum name="HorseStates">
		<Moving />
		<Eating />
		<Idling />
		<CustomBehavior />
		<DrivenByPlayer /> <!-- not a state but a property -->
		<FollowingPlayer />
	</Enum>

	<Enum name="PastureType">
		<static />
		<fixedPositions />
		<randomPositions />
	</Enum>

	<Type name="pasture">
		<Member name="type" type="enum:PastureType">$enum:PastureType.static</Member>
	</Type>

	<Enum name="HorseResult">
		<Failed />
		<Success />
		<Fall />
	</Enum>

	<Type name="stabledHorse">
		<Member name="available" type="bool">true</Member>
	</Type>

	<Type name="rideHorseParams">
		<!-- Required params -->
		<Member name="destination" type="common:wuid"/>

		<!-- Optional params -->
		<Member name="horse" type="common:wuid"/>
		<Member name="speed" type="enum:HorseSpeed">$enum:HorseSpeed.Walk</Member>
		<Member name="approachSpeed" type="enum:movementSpeed">$enum:movementSpeed.walk</Member>
		<Member name="moveMode" type="enum:HorseMoveMode"/>
		<Member name="forceMount" type="bool">false</Member>

		<Member name="moveParams" type="moveParams" />

		<Member name="mountCallback" type="callback"/>
		<Member name="mountCallback_once" type="bool">true</Member>

		<Member name="rideCallback" type="callback"/>
		<Member name="horseCustomBehavior" type="callback"/>

		<Member name="doRelease" type="bool">true</Member>
		<Member name="doUnmount" type="bool">true</Member>
		<Member name="doReleaseOnHalt" type="bool">true</Member>
		<Member name="doUnmountOnHalt" type="bool">true</Member>

		<Member name="tryToPark" type="bool">true</Member>
		<!--  -->
		<Member name="formationLeader" type="common:wuid" />
		<Member name="formationType" type="string" />
		<Member name="formationPreferedPosition" type="string" />
		<Member name="formationPolicy" type="enum:relocationPolicy">$enum:relocationPolicy.RelaxedFollow</Member>
		<Member name="formationSpeedLimit" type="enum:movementSpeed">$enum:movementSpeed.dash</Member>
	</Type>

	<Type name="horseModule">
		<Type name="onMount">
			<Member name="riderId" type="common:wuid" />
			<Member name="state" type="bool" />
			<!-- mount state true, un-mount state false -->
		</Type>
		<Type name="onHorsePossessed">
			<Member name="horse" type="common:wuid" />
		</Type>
		<Type name="playerCommand">
			<!-- used in code -->
			<Member name="id" type="enum:HorseCommands"/>
			<!-- type HorseCommands -->
		</Type>
		<Type name="npcCommand">
			<Member name="id" type="enum:HorseCommands"/>

			<!-- wuid context definition:
					GoTo: destination
					Request: potential rider
					Release: potential rider
					OnMount: rider
					OnDismount: rider
					CreateFormation: formation leader
			-->
			<Member name="wuid" type="common:wuid" />

			<!-- wuid context definition:
					CreateFormation: formation type
			-->
			<Member name="string" type="string"></Member>
			
			<!-- follow fomation params -->
			<Member name="formationPreferedPosition" type="string"/>
			<Member name="formationPolicy" type="enum:relocationPolicy">$enum:relocationPolicy.RelaxedFollow</Member>
			<Member name="formationSpeedLimit" type="enum:movementSpeed">$enum:movementSpeed.dash</Member>

			<!-- moveParams for Move command -->
			<Member name="moveParams" type="moveParams" />

			<!-- OBSOLETE? USE LINK INSTEAD? -->
			<Member name="tryToPark" type="bool">true</Member>

			<!-- customBehavior -->
			<Member name="customBehavior" type="callback" />

		</Type>
		<Type name="horseFeedback">
			<Member name="id" type="enum:HorseResponces"/>
		</Type>
	</Type>

	<Enum name="FlockType">
		<Birds />
		<Fish />
		<Bugs />
		<Chickens />
		<Frogs />
		<Turtles />
	</Enum>

	<Type name="entityModule">
		<Type name="onHumanHorseMount">
			<Member name="mounting" type="bool" />
			<Member name="result" type="enum:HorseResult" />
			<Member name="mountId" type="common:wuid" />
		</Type>

		<!-- obsolete: delete it later due to database inconsistency -->
		<Type name="onHumanHorseDismount">
			<Member name="result" type="enum:HorseResult" />
			<Member name="mountId" type="common:wuid" />
		</Type>

		<Type name="onObserved">
			<Member name="state" type="bool" />
		</Type>

		<Type name="onBoidKilled">
			<Member name="flockType" type="enum:FlockType"/>
			<Member name="pos" type="common:vec3" />
			<Member name="killerId" type="common:wuid" />
		</Type>

		<Type name="onWeaponsDropped">
			<Member name="left" type="common:wuid" />
			<Member name="right" type="common:wuid" />
		</Type>
	</Type>


	<Type name="mountHorse_params">
		<Member name="horse" type="common:wuid"/>
		<Member name="approachSpeed" type="enum:movementSpeed">$enum:movementSpeed.walk</Member>
		<Member name="forceMount" type="bool">false</Member>
	</Type>

	<Enum name="mountHorse_status">
		<Undefined value="0" />
		<Success/>
		<MountFailed />
	</Enum>

	<!--****************************** WEAPON SIGNALS TYPES  ********************************-->

	<Type name="weapon">
		<Type name="onHit">
			<Member name="Attacker" type="common:wuid" />
			<Member name="Target" type="common:wuid" />
			<Member name="IsBroken" type="bool">false</Member>
			<Member name="IsStabbed" type="bool">true</Member>
			<Member name="Offset" type="common:vec3" />
		</Type>

		<Type name="onPlayerArrowFlyingBy">
			<Member name="GUID" type="common:wuid" />
			<Member name="Position" type="common:vec3" />
			<Member name="Direction" type="common:vec3" />
		</Type>
	</Type>


	<!--****************************** CUTSCENE SYSTEM / INTERACTORS ***************************-->
	<Type name="interactionModule">
		<Type name="onInteraction">
			<Member name="target" type="string" />
			<Member name="id" type="common:wuid" />
			<Member name="usedItem" type="common:wuid" />
            <Member name="isHoldAction" type="bool" />
		</Type>
	</Type>

	<!--****************************** BACKGAMMON TYPES  ***********************************-->
	<Type name="backgammon">
		<Type name="requestPlay">
			<Member name="Opponent" type="common:wuid" />
			<Member name="Board" type="common:wuid" />
		</Type>
		<Type name="bet" />
		<Type name="roll">
			<Member name="Dice1" type="int">0</Member>
			<Member name="Dice2" type="int">0</Member>
		</Type>
		<Type name="move">
			<Member name="From" type="int">0</Member>
			<Member name="To" type="int">0</Member>
		</Type>
		<Type name="opponentCheated" />
		<Type name="end">
			<Member name="IsWinner" type="bool">false</Member>
		</Type>
	</Type>

	<!--****************************** BOOK LISTENER ***********************************-->

	<Type name="book">
		<Type name="onUsed">
			<Member name="book" type="common:wuid" />
		</Type>
	</Type>

	<!--****************************** HOLE LISTENER ***********************************-->

	<Type name="hole">
		<Type name="digging">
			<!-- 0-start, 1-stop, 2-success -->
			<Member name="State" type="int">0</Member>
		</Type>
	</Type>

	<!--****************************** BRAIN FLOW ********************************-->

	<Type name="brain">
		<Type name="combatSubbrainEnd">
			<Member name="_" type="bool" />
		</Type>
	</Type>

	<!--****************************** Awareness ********************************-->

	<Type name="awareness">

		<Type name="impulse">

			<Member name="entity" type="common:wuid" />
			<Member name="perceivedAsHostile" type="bool" />

		</Type>

	</Type>

	<!--****************************** Perception ********************************-->

	<Type name="perception">

		<Type name="subscription">

			<Type name="request">

				<Member name="unsubscribe" type="bool" />

				<Member name="callback" type="common:wuid" />
				<Member name="once" type="bool">true</Member>
				<Member name="label" type="string" />

				<!-- Either 'entity' or 'state' should have a value -->
				<Member name="entity" type="common:wuid" />
				<Member name="state" type="string" />

			</Type>

			<Type name="subscription">

				<Member name="callback" type="common:wuid" />
				<Member name="once" type="bool">true</Member>
				<Member name="label" type="string" />

				<!-- Either 'entity' or 'state' should have a value -->
				<Member name="entity" type="common:wuid" />
				<Member name="state" type="string" />

			</Type>

			<Type name="event">

				<Member name="entity" type="common:wuid" />
				<Member name="state" type="string" />
				<Member name="label" type="string" />
				<Member name="relation" type="float" />
				<Member name="suspicious" type="bool">false</Member>

			</Type>

		</Type>

		<Type name="perceptibleData">

			<Member name="threshold" type="float" />
			<Member name="relation" type="float" />
			<Member name="suspicious" type="bool" />

		</Type>

	</Type>

	<!--****************************** Health listener ********************************-->

	<Enum name="HealthStat">

		<Health />
		<Stamina />

	</Enum>

	<Type name="healthStatus">

		<Type name="subscription">
			<Member name="stat" type="int" />
			<!-- HealthStat enum -->
			<Member name="limit" type="float" />
			<Member name="callback" type="common:wuid" />
			<Member name="once" type="bool">true</Member>
		</Type>

		<Type name="unsubscription">
			<Member name="_" type="bool" />
		</Type>

		<Type name="event">
			<Member name="entity" type="common:wuid" />
			<Member name="health" type="float" />
			<Member name="stamina" type="float" />
		</Type>

	</Type>

	<!--****************************** Cryofreeze ********************************-->

	<Type name="cryofreeze">

		<Type name="request">

			<Member name="freeze" type="bool" />
			<Member name="teleport" type="bool">true</Member>
			<Member name="suspendRequests" type="bool">false</Member> <!-- if true, will suspend all further request (after evaluting this one), until `type-cryofreeze:resumeRequests` is sent -->
			<Member name="valid" type="bool">true</Member> <!--for persistence purposes, do not change when sending-->
            
		</Type>
        
		<Type name="resumeRequests">
			<Member name="_" type="bool" />
		</Type>

	</Type>

	<!--****************************** Context ********************************-->

	<Type name="context">

		<Type name="query">

			<Member name="option" type="string" />

		</Type>

		<Type name="timedOption">

			<Member name="option" type="string" />
			<Member name="handle" type="string" />
			<Member name="expiration" type="int64" />

		</Type>

		<Type name="timedOptionRequest">

			<Member name="option" type="string" />
			<Member name="handle" type="string" />
			<Member name="expiration" type="int" />

		</Type>

		<Type name="persistenceRecord">

			<Member name="option" type="string" />
			<Member name="handle" type="string" />

		</Type>

	</Type>

	<!--************************ Included tree params *************************-->

	<!--======= Conduct Player =========-->
	<Enum name="conductPlayerMode">
		<point value="0" />
		<path />
		<waypoint />
	</Enum>

	<Type name="conductPlayerParams">

		<Member name="mode" type="enum:conductPlayerMode">$enum:conductPlayerMode.point</Member>
		<Member name="speed" type="string">Walk</Member>
		<Member name="destination" type="common:wuid"/>
		<Member name="disableCatchingUp" type="bool">false</Member>

		<!-- Distance to player  -->
		<Member name="conductDistance_high" type="float">5</Member>
		<Member name="conductDistance_low" type="float">3.5</Member>

		<!-- Distance to destionation -->
		<Member name="catchUpDistance_low" type="float">4</Member>
		<Member name="catchUpDistance_high" type="float">6</Member>
		<Member name="destinationReachedDistance" type="float">5</Member>

		<!-- Monolog when player does not follow path -->
		<Member name="followMe_isActive" type="bool">true</Member>
		<!-- OBSOLETE -->
		<Member name="followMe_maxDistance" type="float">30</Member>
		<!-- Unused so far -->
		<Member name="followMe_patience" type="int">-1</Member>
		<Member name="followMe_delay" type="string">10s</Member>
		<Member name="followMe_monolog" type="dialog:monologRequest"/>
		<Member name="followMe_dialog" type="dialog:parameters:initiator"/>
		<!-- Monolog while walking -->
		<Member name="smallTalk_isActive" type="bool">true</Member>
		<!-- OBSOLETE -->
		<Member name="smallTalk_timer" type="string">0s</Member>
		<Member name="smallTalk_delay" type="string">10s</Member>
		<Member name="smallTalk_iteration" type="int">1</Member>
		<!-- Number of dialog iterations.  -->
		<Member name="smallTalk_monolog" type="dialog:monologRequest"/>
		<Member name="smallTalk_dialog" type="dialog:parameters:initiator"/>
		<!-- Monolog when arrive -->
		<Member name="finish_isActive" type="bool">true</Member>
		<!-- OBSOLETE -->
		<Member name="finish_monolog" type="dialog:monologRequest"/>
		<Member name="finish_dialog" type="dialog:parameters:initiator"/>

	</Type>

	<Enum name="conductPlayerStatus">
		<Undefined value="0" />
		<DestinationReached />
		<PatienceOver />
	</Enum>

	<Enum name="conductPlayerState">
		<Moving />
		<Waiting />
		<CatchingUp />
	</Enum>

	<!--======= Follow NPC =========-->
	<Type name="followNPC">
		<Member name="walk2run" type="float">6</Member>
		<Member name="walk2sprint" type="float">20</Member>
		<Member name="run2walk" type="float">3</Member>
		<Member name="run2sprint" type="float">20</Member>
		<Member name="sprint2walk" type="float">3</Member>
		<Member name="sprint2run" type="float">15</Member>
	</Type>

	<Enum name="walkInGroup_state">
		<start />
		<finish />
	</Enum>

	<Type name="walkInGroup_params">
		<Member name="formationName" type="string"/>
		<Member name="uniqueGroupName" type="string"/>
		<Member name="groupSize" type="int"/>
		<Member name="distanceMove_params" type="distanceMove_params:wuid" />
	</Type>

	<Type name="teleport_allNonTags">
		<Member name="area" type="common:wuid"/>
		<Member name="teleport" type="common:wuid"/>
		<Member name="refObject" type="common:wuid"/>
		<Member name="tagToStay" type="string"/>
	</Type>


	<Type name="followPlayerPath">
		<Member name="followWrongWay" type="bool">false</Member>
		<Member name="doCutCorners" type="bool">false</Member>
		<!-- squared distances -->
		<Member name="maxNpcDistSqFromPath" type="float">5.0</Member>
		<Member name="registerPlayerDistSq" type="float">15.0</Member>
		<Member name="barkRole" type="string"/>
		<Member name="topicId_playerOffPath" type="int">0</Member>
		<Member name="topicId_playerWrongWay" type="int">0</Member>
		<Member name="topicId_playerReturns" type="int">0</Member>
		<Member name="topicId_destinationReached" type="int">0</Member>
	</Type>

	<Type name="lockpickDoorParams">
		<Member name="door" type="common:wuid"/>
		<Member name="direction" type="int"/>
		<!-- -->
	</Type>

	<Enum name="lockpickDoor_direction">
		<!-- Refers to the name of the helper -->
		<Front value="1"/>
		<Back />
	</Enum>

	<Enum name="followPlayerPath_reasonToWait">
		<wrongWay />
		<awayFromPath />
	</Enum>

	<Type name="tryPlayerDialogParams">
		<Member name="distance_talk" type="float">3.5</Member>
		<Member name="distance_relaxedWalk" type="float">0</Member>
		<Member name="distance_walk" type="float">6.0</Member>
		<Member name="distance_alertedWalk" type="float">0</Member>
		<Member name="distance_run" type="float">10.0</Member>
		<Member name="distance_fastRun" type="float">0</Member>
		<Member name="distance_sprint" type="float">20.0</Member>
		<Member name="patience" type="int">5</Member>
		<Member name="interruptFastTravel" type="bool">false</Member>
	</Type>

	<Enum name="tryPlayerDialog_status">
		<Undefined value="0" />
		<Success/>
		<PlayerTooFar />
	</Enum>

	<Enum name="FailReason">
		<Success value="0" />
		<ResultFalse />
		<Cancel />
		<BehaviorNotAvailable />
	</Enum>

	<!--======= WaitForLowHealth =========-->
	<Type name="waitForLowHealthParams">
		<Member name="healthThreshold_min" type="float">30</Member>
		<Member name="healthThreshold_ratio" type="float">0.3</Member>
	</Type>
	<!--======book reading========-->
	<Type name="bookreadParams">
		<Member name="location" type="common:wuid"></Member>
		<Member name="mode" type="enum:bookread_mode">$enum:bookread_mode.standing</Member>
		<Member name="book" type="common:wuid"></Member>
		<Member name="doLocationAlign" type="bool">true</Member>
		<Member name="duration" type="string">-1</Member>
	</Type>
	<Enum name="bookread_mode">
		<standing />
		<sit />
		<sitTable />
		<bookstand />
	</Enum>

	<!--****************************** Location ********************************-->

	<Enum name="crimeIconLevel">

		<none />
		<fine />
		<jail />

	</Enum>

	<Type name="location">

		<Type name="crimeIconLevelUpdate">

			<Member name="sender" type="common:wuid" />
			<Member name="level" type="enum:crimeIconLevel" />

		</Type>

		<Type name="crimeActorListUpdateRequest">

			<Member name="_" type="bool" />

		</Type>

	</Type>

	<!--****************************** Trespass ********************************-->

	<Enum name="trespassLevel">
	
		<!-- Init value, should never be used -->
		<undeclared />
	
		<antitrespass />
		<none />
		<semipublic />
		<personal />
		<prohibited />
		
	</Enum>
	
	<Enum name="courtTrespassMode">
		<always />
		<nightOnly />
	</Enum>
	
	<Enum name="trespassOverrideOrientation">
		<atMost />
		<atLeast />
	</Enum>
	
	<Type name="trespass">

		<Type name="override">
			
			<Type name="record">
			
				<Member name="level" type="enum:trespassLevel" />
				<Member name="orientation" type="enum:trespassOverrideOrientation" />
				<Member name="handle" type="string" />
				<Member name="persistent" type="bool" />
				<Member name="removeWhenDudeOutsideArea" type="common:wuid" />
				
			</Type>
			
			<Type name="request">
		
				<!-- Whether to add or remove the override -->
				<Member name="add" type="bool" />

				<!-- Override -->
				<Member name="level" type="enum:trespassLevel" />
				<Member name="orientation" type="enum:trespassOverrideOrientation" />
				<Member name="handle" type="string" />
				<Member name="persistent" type="bool" />
				
				<!-- Relevant when 'add' is <true>: whether to produce an error when an override with the same handle already exists -->
				<Member name="errorOnAddWithDuplicitHandle" type="bool">true</Member>
				
				<!-- Relevant when 'add' is <false>: whether to produce an error when an override with the provided name doesn't exist -->
				<Member name="errorOnRemoveNonexistentHandle" type="bool">true</Member>
				
				<!-- Relevant when 'add' is <false>: whether to hold off with the override removal until player leaves specified area -->
				<Member name="removeWhenDudeOutsideArea" type="common:wuid" />
		
			</Type>
		
		</Type>
	
		<Type name="expected">

			<Member name="set" type="bool" />
			<Member name="entity" type="common:wuid" />
			<Member name="source" type="common:wuid" />

		</Type>
		
		<Type name="homePartLinkData">
		
			<Member name="prohibitedAreaIncludedInExpectedAreas" type="bool" />
		
		</Type>
		
		<Type name="homeUpdateRequest">
		
			<Member name="_" type="bool" />
		
		</Type>

	</Type>

	<Enum name="trespassAreaSevereness">

		<public />
		<semipublic />
		<personal />
		<prohibited />

	</Enum>

	<Enum name="trespassReaction">

		<none />
		<watch />
		<warn />
		<act />

	</Enum>

	<!--****************************** Quest Types ********************************-->
	<!-- Quest enums -->
	<Enum name="q_pribyslav_camperReaction">
		<friendly />
		<disguise />
		<trespass />
	</Enum>

	<Enum name="q_pribBattle_attackSide">
		<auschitz />
		<bridge />
		<skalitz />
	</Enum>

	<Enum name="q_huntPtacek_dogState">
		<idle />
		<sitting />
		<lying />
		<following />
		<guarding />
		<teleport />
		<sleeping />
		<retrieve />
		<dead />
	</Enum>

	<Enum name="q_escapeToTalmberk_seekInfoType">
		<playerSeen />
		<beingHurt />
	</Enum>

	<Enum name="q_escapeToTalmberk_seekState">
		<!--run value="1" /-->
		<work />
		<searchPlayer />
		<approachPlayer />
		<approachLastPlayerPosition />
		<catchPlayer />
		<simulate />
		<ignorePlayer />
		<playerAlreadyInDialog />
	</Enum>
	
	
	<Enum name="q_escapeToTalmberk_orders">
		<idle />
		<prepare />
		<speech />
		<run />
	</Enum>

	<Enum name="q_counterfeiters_rapotaOversee">
		<atHome />
		<moving />
		<atWorkshop />
	</Enum>

	<!-- Quest custom data types -->
	<Type name="questData">
		<!-- utils: OBSOLETE -->
		<Type name="utils">
			<Member name="id" type="int"/>
		</Type>

		<Type name="q_samopesh">
			<Member name="wuid" type="common:wuid"/>
		</Type>

		<Type name="q_pribyslav">
			<Type name="battle">
				<Member name="arrowBucketsBurn" type="int">0</Member>
				<Member name="banditKills" type="int">0</Member>
				<Member name="reinforcementLevel" type="int">0</Member>
				<Member name="kettleSlot_1" type="common:wuid"/>
				<Member name="kettleSlot_2" type="common:wuid"/>
				<Member name="kettleSlot_3" type="common:wuid"/>
				<Member name="kettleSlot_4" type="common:wuid"/>				
			</Type>
			
			<Type name="smokeScreenConsts">
				<Member name="burnTime" type="float">120000</Member>
				<!-- in miliseconds-->
				<Member name="descentStepCount" type="float">600</Member>
				<Member name="totalDescentHeight" type="float">1.5</Member>
				<Member name="fireToHayDescentRatio" type="float">0.5</Member>
				<!-- The fire particle needs to descent too! 0.5 = half pace.-->
			</Type>
			
			<Type name="hayInfo">
				<Member name="isBurning" type="bool"/>
			</Type>
			
			<Type name="banditDialogParams">
				<Member name="repeat_count" type="int">1</Member>
				<Member name="repeat_timeout" type="string">4s</Member>
				<Member name="repeat_tree" type="callback"/>
				<Member name="maxDistance" type="string">-1</Member>
				<Member name="moveSpeed" type="string">Walk</Member>
			</Type>
			
			<Type name="noticePlayerParams">
				<Member name="repeat_count" type="int"/>
				<Member name="repeat_timeout" type="int64"/>
				<!-- in miliseconds -->
				<!-- constants  -->
				<Member name="REPEAT_DELAY" type="int">7000</Member>
				<!-- in miliseconds -->
				<Member name="MAX_INSTANCES" type="int">-1</Member>
			</Type>
			
			<Type name="conductPlayer"> 
				<!-- check SendMessageToEntityData if adding new member -->
				<Member name="camper" type="common:wuid"/>
			</Type>
			
			<Type name="localAlert">
				<Member name="camper" type="common:wuid"/>
			</Type>
			
			<Type name="camperJoin">
				<Member name="camper" type="common:wuid"/>
			</Type>
			
			<Type name="playSound">
				<Member name="label" type="string"/>
				<Member name="intensityDelta" type="float"/>				
				<Member name="start" type="bool"/>
				<Member name="stop" type="bool"/>
			</Type>
			
			<Type name="soundProperties">
				<Member name="emitter" type="common:wuid"/>
				<Member name="name" type="string">battle_ambient</Member>	
				<Member name="intensity" type="float"/>
				<Member name="isSoundPlayed" type="bool"/>
			</Type>
		</Type>

		<Type name="q_pribBattle_questInfo">
			<Member name="arrowBucketsBurn" type="int">0</Member>
			<Member name="banditKills" type="int">0</Member>
		</Type>
		
		<Type name="q_cemetery_flowers">
			<Type name="incenseBurner_state">
				<Member name="state" type="int">0</Member>
				<Member name="event" type="int">0</Member>
				<Member name="subscriber" type="common:wuid"/>
				<Member name="so" type="common:wuid"/>
			</Type>
		</Type>

		<Type name="q_monastery_treasure">
			<Member name="wuid" type="common:wuid"/>
		</Type>

		<Type name="q_escapeToTalmberk">
			<Type name="seekerCommunication">
				<Member name="type" type="enum:q_escapeToTalmberk_seekInfoType"/>
				<Member name="position" type="common:vec3"/>
			</Type>

			<Type name="npcCooldown">
				<Member name="npc" type="common:wuid"/>
				<Member name="cooldown" type="int64"/>
			</Type>
		</Type>

		<Type name="q_auschitz">
			<Type name="mass">
				<Member name="spot" type="common:wuid"/>
			</Type>
		</Type>

		<Type name="q_huntPtacek">
			<Type name="dogSignal">
				<Member name="state" type="enum:q_huntPtacek_dogState">$enum:q_huntPtacek_dogState.idle</Member>
				<Member name="entity" type="common:wuid"/>
			</Type>
		</Type>

		<Type name="q_sazavaMonastery">
			<Type name="playerEating" />

			<Type name="playerWriting" />
		</Type>
	</Type>


	<!-- Quest progress enums -->
	<Enum name="questProgressId_samopesh">
		<followMachToCamp value="1" />
		<meetWithBandits />
		<bandits_wait />
		<bandits_follow />
		<bandits_relaxSamopesh />
		<bandits_relaxKolben />
		<bandits_abort />
		<bandits_attackPeta />
		<bandits_returnToCamp />
		<conductPlayerToCamp />
		<mach_seesPlayerInCamp />
		<meetBehindMill />
		<guardPrcek_informBorek />
		<forceCutscene_player_camp_leader />
	</Enum>

	<Enum name="q_samopesh_machAfterMill">
		<followPlayer value="1"/>
		<meetWithPlayer />
		<knowPetasLocation />
		<lostPlayer />
	</Enum>

	<Enum name="questProgressId_ledecko">
		<killHynek value="1" />
		<cutscene_banditsAtCave />
		<returnToCamp />
		<dialogInCave />
		<visitCave_abort />
		<hynek_attackBandits />
	</Enum>

	<Enum name="questProgressId_counterfeiters">
		<horsePursuit_ulrichCatched value="1"/>
		<horsePursuit_ulrichRunAway />
		<rapota_abortOversee />
		<ulrich_abortWaiting />
		<ulrich_abortWaitAtMill />
		<ulrich_abortFollowToJezek />
	</Enum>

	<Enum name="questProgressId_devilplay">
		<goToCrossroad value="1" />
		<goToRitualPlace />
		<ritual />
		<interruptRitual />
		<sex />
		<attack />
	</Enum>

	<Enum name="questProgressId_cemetery_flowers">
		<putHerbs value="1"/>
		<putHerbsDone/>
		<burnHerbs/>
		<nearLadasGrave/>
	</Enum>

	<Enum name="questProgressId_auschitz">
		<doDrinkWithBohuta value="1"/>
	</Enum>


	<!-- Quest signal types -->
	<Type name="questProgress">
		<!--
        You can either use 'common' subtype or create a quest-specific signal
        But keep in mind there is also different type 'questData' for structured data
    -->
		<Type name="common">
			<Member name="id" type="int"/>
		</Type>

		<!-- quest specific -->
		<Type name="q_samopesh">
			<Member name="id" type="enum:questProgressId_samopesh"/>
		</Type>
		<Type name="q_ledecko">
			<Member name="id" type="enum:questProgressId_ledecko"/>
		</Type>
		<Type name="q_escapeToTalmberk">
			<Member name="id" type="enum:questProgressId_escapeToTalmberk"/>
		</Type>
		<Type name="q_awakeingInRattay">
			<Member name="id" type="int"/>
		</Type>
		<Type name="q_devilplay">
			<Member name="id" type="enum:questProgressId_devilplay"/>
		</Type>
		<Type name="q_cemetery_flowers">
			<Member name="id" type="1"/>
		</Type>
		<Type name="q_counterfeiters">
			<Member name="id" type="enum:questProgressId_counterfeiters"/>
		</Type>
	</Type>

	<!--****************************** Quest Utils types ********************************-->
	<Type name="QuestLocation">
		<Member name="npc" type="string"/>
		<Member name="ctx" type="string"/>
	</Type>

	<Type name="teleport_params">
		<Member name="locationContext" type="string"/>
		<Member name="synchronize" type="bool">false</Member>
		<Member name="deleteLink" type="bool">true</Member>
		<Member name="customLink" type="string"/>
		<Member name="customBehaviorName" type="string"/>
	</Type>

	<Type name="teleportNpcData">
		<Member name="destination" type="common:wuid" />
		<Member name="hasDaycycle" type="bool"/>

		<Member name="idle" type="bool">false</Member>
		<Member name="withMount" type="bool">false</Member>
		<!-- OBSOLETE -->
		<Member name="keepNightClothes" type="bool">false</Member>
		
		<Member name="rpgProtection" type="bool">false</Member>
	</Type>

	<!--****************************** Cutscene types ********************************-->

	<Type name="CutsceneSpot">
		<Member name="npc" type="string"/>
		<Member name="cs" type="int"/>

		<!-- DONT MOVE ANY MEMBER ABOVE THIS COMMENT (order of the member might be used in data links) -->

		<Member name="alias" type="string"/>

		<!-- OBSOLETE -->
		<Member name="after" type="int">true</Member>

		<Member name="withMount" type="bool">false</Member>

		<!-- OBSOLETE -->
		<Member name="idle" type="bool">false</Member>
		<!-- should drop items before the teleport? -->
		<!-- OBSOLETE -->
		<Member name="withItems" type="bool">false</Member>
		<!-- OBSOLETE -->
		<Member name="keepNightClothes" type="bool">false</Member>
		
		<Member name="clothesType" type="string">any</Member>
		<Member name="weaponType" type="string">any</Member>
		
		<Member name="rpgProtection" type="bool">true</Member>
	</Type>

	<Type name="teleportLink">
		<Member name="lockCount" type="int"/>
		<Member name="sync" type="bool">true</Member>
		<Member name="autoDelete" type="bool">true</Member>
		<Member name="idle" type="bool"/>
		<!-- OBSOLETE -->
		<Member name="withItems" type="bool"/>
		<!-- OBSOLETE -->
		<Member name="keepNightClothes" type="bool">false</Member>

		<Member name="reason" type="string"/>
		
		<!-- data for cutsceneTeleport: modifyForcePatchExecution -->
		<Member name="restoreDialog" type="bool">false</Member>
		<Member name="restoreCombat" type="bool">false</Member>
		<Member name="restoreRPG" type="bool">false</Member>
	</Type>

	<Enum name="cutsceneState">
		<doStart value="1" />
		<onEnd value="2" />
		<inProgress value="3" />
		<onBegin value="4" />
	</Enum>

	<Type name="cutscene">
		<Member name="alias" type="string"/>

		<!-- OBSOLETE -->
		<Member name="id" type="int"/>
		<!-- OBSOLETE -->
		<Member name="name" type="string"/>

		<Member name="state" type="enum:cutsceneState">$enum:cutsceneState.doStart</Member>

		<Member name="customFadeIn" type="bool">false</Member>
		<Member name="dialogFadeIn" type="bool">false</Member>		

		<Member name="postFinalizationCustomFadeIn" type="bool">false</Member>
		<Member name="postFinalizationDialogFadeIn" type="bool">false</Member>		
		
		<Member name="holsterWeapon" type="bool">false</Member>
		<Member name="keepHalberd" type="bool">false</Member>

		<Member name="freezeAI" type="bool">false</Member>
 
		<Member name="saveGameQuest" type="string"/>
		<Member name="saveGameObjective" type="string"/>
		
		<Member name="time" type="float">-1.0</Member>
		<Member name="weather" type="string"></Member>
		
		<Member name="onBeginEvent" type="bool">false</Member>
		<Member name="onFinalizationEvent" type="bool">false</Member>
		
		<Member name="onBeginEvent_override" type="callback"/>
		<Member name="onEndEvent_override" type="callback"/>
		<Member name="onFinalizationEvent_override" type="callback"/>
		
		<Member name="muteSounds" type="bool">true</Member>
		<Member name="preventCombat" type="bool">true</Member>

		<!-- default value must be set to true so we dont introduce new bugs (deadlock) -->
		<Member name="customFadeInIsFromCombat" type="bool">true</Member>
		
		<Member name="preteleportPlayer" type="bool">false</Member>
		<Member name="disableReadinessWait" type="bool">false</Member>
	</Type>

	<Enum name="cutsceneMode">
		<sequence />
		<video />
		<dummy />
		<fastTravel />
	</Enum>

	<Type name="cutsceneData">
		<Member name="id" type="int"/>
		<Member name="mode" type="enum:cutsceneMode">$enum:cutsceneMode.video</Member>
		<Member name="sequence" type="string"/>
		<Member name="video" type="string"/>
		<Member name="checkpoints" type="string"/>
	</Type>
	
		
	<Enum name="cutscenePhase">
		<start />
		<end />
	</Enum>

	
	<Type name="cutsceneSubscription">
		<Type name="event">
			<Member name="alias" type="string"/>
			<Member name="phase" type="enum:cutscenePhase"/>
		</Type>
	</Type>
	
	<Type name="fastTravelSafeStart">
		<Member name="cs" type="int"/>
		<Member name="alias" type="string"/>
	</Type>
	
	<Type name="saveAfterCutscene">
		<Type name="params">
			<Member name="questName" type="string"/>
			<Member name="objectiveName" type="string"/>
			<Member name="cutsceneAlias" type="string"/>
		</Type>
	</Type>
	
	<Type name="cutscene_changeClothes">
		<!-- obsolete -->
		<Type name="clothes">
			<Member name="alias" type="string" />
			<Member name="clothesType" type="string">any</Member>
			<Member name="weaponType" type="string">any</Member>
		</Type>
		
		<Type name="behaviorData">
			<Member name="alias" type="string" />
			<Member name="lockCount" type="int" />
			<Member name="clothesType" type="string">any</Member>
			<Member name="weaponType" type="string">any</Member>
		</Type>
	</Type>
	
	<Enum name="cutscenePreviewMode">
		<capture />
		<profile />
		<haste />
	</Enum>	
	
	<Type name="cutscenePreview">
		<Type name="params">
			<Member name="mode" type="enum:cutscenePreviewMode" />			
		</Type>
	</Type>
	
	<Type name="setForcePatchExecution">
		<Type name="params">
			<Member name="reason" type="string" />
			<Member name="suspendDialog" type="bool">true</Member>
			<Member name="suspendCombat" type="bool">true</Member>
			<Member name="suspendRPG" type="bool">true</Member>
		</Type>
	</Type>
	
	<Type name="modifyForcePatchExecution">
		<Type name="params">		
			<Member name="reason" type="string" />
			<Member name="restoreRPG" type="bool">false</Member>
			<Member name="restoreDialog" type="bool">false</Member>
			<Member name="restoreCombat" type="bool">false</Member>
		</Type>
	</Type>
	
	<Type name="clearForcePatchExecution">
		<Type name="params">
			<Member name="reason" type="string" />
		</Type>
	</Type>
	
	<!--******************************  ********************************-->

	<Type name="questCheat">
		<!-- OBSOLETE -->
		<Member name="id" type="int"/>
	</Type>

	<Enum name="questCheatId">
		<!-- OBSOLETE -->
		<samopesh_meetWithMach value="1" />
		<samopesh_infiltrate />
		<ledecko_malinaTrail />
		<samopesh_visitPeta />
	</Enum>

	<Type name="behaviorRestore">
		<!-- Progress of the current behaviour (per single time-dependent stage which does affect something persistent) -->
		<Member name="stage" type="int">0</Member>

		<!-- Variables for storing choises which made by random -->
		<!-- Default value -1 indicates that the choise has not beed made so far -->
		<Member name="random" type="int">-1</Member>
		<Member name="random2" type="int">-1</Member>
	</Type>

	<!--****************************** Dan Test ********************************-->
	<!-- DELETE -->
	<Type name="dan">
		<Type name="changeDirection">
			<Member name="newDirection" type="common:wuid"/>
		</Type>
		<Type name="equip">
			<Member name="hoe" type="bool">false</Member>
		</Type>
		<Type name="farmingRequest">
			<Member name="farmer" type="common:wuid"/>
		</Type>
		<Type name="farmingRelease">
			<Member name="rowNumber" type="int">0</Member>
		</Type>
		<Type name="farmingResponce">
			<Member name="rowNumber" type="int">0</Member>
			<Member name="columnNumber" type="int">0</Member>
			<Member name="maxColumns" type="int">0</Member>
			<Member name="rowStart" type="common:vec3"/>
			<Member name="rowEnd" type="common:vec3"/>
		</Type>
	</Type>

	<!--****************************** Martin Cerny - Combat simulator tests ********************************-->
	<Type name="MartinCerny">
		<Type name="CombatExperimentData">
			<!--		<Member name="opponent" type="common:wuid"></Member>-->
			<Member name="clothingPreset" type="string"/>
			<Member name="weapon" type="string">5</Member>
			<Member name="stats" type="combatSimulatorPlayerStats"/>
			<Member name="initialHealth" type="float">100</Member>
			<Member name="initialStamina" type="float">110</Member>
			<Member name="canDie" type="bool">false</Member>
			<Member name="algorithm" type="string"/>
			<Member name="opponentAlgorithm" type="string"/>
			<Member name="aggressivity" type="float">0.5</Member>
			<Member name="optimism" type="float">0.5</Member>
			<Member name="scenarioID" type="string"/>
			<Member name="round" type="int">0</Member>
		</Type>
	</Type>



	<!--****************************** Jozkuv vesely koutek ********************************-->
	<Type name="creditsEnd">
		<Member name="end" type="bool"/>
	</Type>

	<Type name="trebuchet">
		<Member name="command" type="string"/>
		<Member name="response" type="string"/>
		<Member name="status" type="string"/>
		<Member name="mode" type="string"/>
		<Member name="npcsNode" type="common:wuid"/>
	</Type>

	<Type name="dataStorage">
		<Member name="_string" type="string"/>
		<Member name="_bool" type="bool"/>
		<Member name="_int" type="int"/>
		<Member name="phase" type="int"/>
		<Member name="_wuid" type="common:wuid"/>
	</Type>

	<Type name="container">
		<Type name="item">
			<Member name="wuid" type="common:wuid"/>
			<Member name="guid" type="string"/>
			<Member name="category" type="string"/>
			<Member name="amount" type="int">1</Member>
		</Type>
		<Type name="request">
			<Member name="place" type="bool">false</Member>
			<Member name="allOrNone" type="bool">false</Member>
			<Member name="found" type="bool">false</Member>
			<Member name="foundAll" type="bool">false</Member>
			<Member name="onlySearch" type="bool">false</Member>
			<Member name="instant" type="bool">false</Member>

			<Member name="_sourceInventory" type="common:wuid"/>
			<Member name="_targetInventory" type="common:wuid"/>

			<Member name="requestedItem" type="container:item"/>
			<Member name="resultItem" type="container:item"/>
		</Type>
	</Type>

	<Type name="timekeeper">
		<Type name="timer">
			<Member name="name" type="string">unnamed</Member>
			<Member name="day" type="int">0</Member>
			<Member name="hour" type="float">7.0</Member>
			<Member name="callbackTarget" type="common:wuid"/>
			<Member name="repeat" type="bool">false</Member>
			<Member name="wait" type="bool">false</Member>

			<!--private-->
			<Member name="checkDay" type="int"/>
			<Member name="invalid" type="bool">false</Member>
			<Member name="nextRun" type="float"/>
		</Type>
		<Type name="callback">
			<Member name="name" type="string"/>
			<Member name="timeDelta" type="float">0.0</Member>
		</Type>
		<Type name="stop">
			<Member name="name" type="string"/>
		</Type>
        <Type name="recalculate"> <!-- sent in forwardTime -->
            <Member name="_" type="int" />
        </Type>
	</Type>


	<Type name="dream">
		<Type name="start">
			<Member name="callback" type="common:wuid"/>
		</Type>
		<Type name="end"/>
		<Type name="finished"/>
		<Type name="addEnemy">
			<Member name="wuid" type="common:wuid"/>
			<Member name="name" type="string"/>
		</Type>
	</Type>

	<Type name="lodarea">
		<Type name="show">
			<Member name="area" type="common:wuid"/>
		</Type>
	</Type>

    <enum name="ternary">
        <yes /> <!-- can't use true and false -->
        <no />
        <unknown />
    </enum>
    
	<Type name="skirmish">
		<!-- types -->
		<Type name="unitState">
			<Member name="duelAvailable" type="bool">true</Member>
			<Member name="idleUntilFirstCommand" type="bool">false</Member>
			<!-- ranged or melee-->
			<Member name="combatMode" type="string">undefined</Member>
			<!-- current target -->
			<Member name="attackTarget" type="common:wuid"/>
			<!-- current target -->
			<Member name="newAttackTarget" type="common:wuid"/>
			<!-- whoever last attacked me-->
			<Member name="attackedBy" type="common:wuid"/>
			<!-- whether targeting mode is allowed, disallow only for special occasions -->
			<Member name="allowTargetingMode" type="bool">true</Member>
		</Type>

		<Type name="areaPresence">
			<Member name="lockName" type="string">__undefined__</Member>
			<Member name="area" type="common:wuid"/>

			<Member name="isPlayerIn" type="bool">false</Member>
			<Member name="count" type="int">0</Member>
		</Type>

		<!-- messages -->
		<Type name="init">
			<Member name="controller" type="common:wuid"/>
			<Member name="oponentsNode" type="common:wuid"/>
			<Member name="isEnemy" type="bool"/>
			<Member name="useMassBrain" type="bool">true</Member>
			<Member name="startInCombatMode" type="bool">true</Member>
			<Member name="useQuickTargeting" type="bool">false</Member>
			<Member name="targetingDistance" type="float">5.0</Member>
		</Type>

		<Type name="initialized">
			<Member name="self" type="common:wuid"/>
            <Member name="numMembers" type="int">1</Member> <!--how many members does this group have. Default 1 for a single NPC-->
		</Type>

		<Type name="duelRequest">
			<Member name="id" type="common:wuid"/>
		</Type>

		<Type name="duelResponse">
			<Member name="available" type="bool"/>
			<Member name="target" type="common:wuid"/>
		</Type>

		<Type name="task">
			<Member name="type" type="string"/>
			<Member name="target" type="common:wuid"/>
			<!-- archers stand and shoot -->
			<Member name="archerStand" type="bool">false</Member>
			<Member name="unit" type="string"/>
		</Type>

		<Type name="command">
			<Member name="type" type="string"/>
			<!-- by context: do = source of behavior, move = target point etc. -->
			<Member name="target" type="common:wuid"/>
			<Member name="immediate" type="bool">false</Member>
			<Member name="clearQueue" type="bool">false</Member>
			<Member name="name" type="string">noName</Member>
			<!-- parameter for move -->
			<Member name="cover" type="bool">false</Member>
			<!-- parameter for setCombatMode -->
			<Member name="combatMode" type="bool"/>
			<!-- parameter for attackGroup-->
			<Member name="targetCategory" type="string"/>
			<!-- parameter for move and moveAsGroup-->
			<Member name="movementSpeed" type="string">FastRun</Member>
			<!-- parameter for moveHorse -->
			<!--<Member name="rideHorseParams" type="rideHorseParams"/>-->
			<!-- Pokud se tohle někdy opět zapojí, je třeba updatovat na změnu typu callback a jeho používání! -->
			<!-- parameter for do and reallyDo -->
			<Member name="behavior" type="string"/>
			<!-- parameter for move -->
			<Member name="predefPathOffset" type="float">0.0</Member>
			<Member name="predefPathParams" type="string"/>
			<Member name="randomRadius" type="float">-1.0</Member>
			<!-- additional wuid -->
			<Member name="addEntity" type="common:wuid"/>
			<!-- Used for group commands -->
			<Member name="unit" type="string"/>
            <Member name="forceGuardInFormation" type="bool">false</Member><!-- Used for holdGround, forces guard after NPCs roughly get to formation -->
			<!--bark on command-->
			<Member name="barkTopic" type="string"/>
			<Member name="barkMetarole" type="string">NPC</Member>
		</Type>

		<Type name="setAttribute">
			<!--One of attributes defined in combat_slave: for example add buff -->
			<Member name="attribute" type="string"/>
			<Member name="stringParam" type="string"/>
			<!-- Used for group commands -->
			<Member name="unit" type="string"/>
		</Type>

		<Type name="completed">
			<Member name="command" type="string"/>
			<Member name="commandData" type="skirmish:command"/>
			<Member name="success" type="bool">true</Member>
		</Type>

		<Type name="death">
			<Member name="command" type="string"/>
			<Member name="target" type="common:wuid"/>
			<Member name="isEnemy" type="bool"/>
			<Member name="remaining" type="int">0</Member> <!--how many members remain alive. Default 0, when sent by NPCs-->
		</Type>

		<Type name="barkSetup">
			<Member name="once" type="bool">true</Member>
			<Member name="cooldown" type="string">-1</Member>
			<Member name="topicLabel" type="string"/>
			<Member name="metarole" type="string"/>
			<Member name="forceSubtitles" type="bool">false</Member>
			<Member name="command" type="string"/>
            <Member name="anim" type="enum:animationOverride">$enum:animationOverride.noOverride</Member>
			<!-- This bark will only be executed WHILE on this command-->
		</Type>

        <Type name="soundSetup">
            <!-- selectors -->
            <Member name="command" type="string" /> <!-- leave aempty for any command -->
            <Member name="commandActive" type="enum:ternary">$enum:ternary.unknown</Member>
            <Member name="targetingActive" type="enum:ternary">$enum:ternary.unknown</Member>
            <!-- sound settings -->
            <Member name="trigger" type="string" />
            <Member name="parameter" type="string" />
            <Member name="intensity" type="float" />
            <Member name="intensityPerSecond" type="float" /> <!-- Intensity change per second, starting when command is started -->
            <Member name="intensityPerEnemy" type="float" /> <!-- Intensity change per enemy nearby (will add to intensity, subtract when enemies get far away) -->
            <Member name="disabledAtZeroIntensity" type="bool">false</Member>
            <Type name="runtimeData">
                <Member name="isRunning" type="bool" />
                <Member name="timeRunning" type="float" />
            </Type>
        </Type>
	</Type>
    
	<Type name="simpleDialog">
		<Member name="forced" type="bool"/>
		<Member name="alias" type="string"/>
		<Member name="topicId" type="int"/>
		<Member name="withPlayer" type="bool"/>
		<Member name="npc1" type="common:wuid"/>
		<Member name="npc2" type="common:wuid"/>
		<Member name="npc3" type="common:wuid"/>
	</Type>

	<Type name="itemQuestQuery">
		<!-- in -->
		<Member name="id" type="string"/>
		<Member name="amount" type="int"/>
		<!-- out -->
		<Member name="has" type="bool">false</Member>
		<Member name="item" type="common:wuid"/>
	</Type>


	<Enum name="shoppeType">
		<undefined value="0" />
		<food value="1" />
		<tools value="2" />
	</Enum>

	<Type name="shoppe">
		<Type name="request">
			<Member name="itemGUID" type="string"/>
			<Member name="amount" type="int">1</Member>
		</Type>
		<Type name="response">
			<Member name="attr" type="int">1</Member>
		</Type>
		<Type name="open">
			<Member name="open" type="bool">false</Member>
		</Type>
		<Type name="definition">
			<Member name="type" type="enum:shoppeType">$enum:shoppeType.undefined</Member>
		</Type>
	</Type>

	<Type name="garrison">
		<Type name="confirm">
			<Member name="completed" type="bool">false</Member>
		</Type>

		<Type name="relocate">
			<Member name="target" type="common:wuid"/>
		</Type>

		<Type name="armory">
			<Member name="instant" type="bool">false</Member>
		</Type>

		<Type name="injectBehavior">
			<Member name="name" type="string"/>
			<Member name="behaviorSource" type="common:wuid"/>
			<Member name="behavior" type="string"/>
		</Type>

		<Type name="setWorkplaceState">
			<Member name="name" type="string"/>
			<Member name="id" type="common:wuid"/>
			<Member name="enabled" type="bool">true</Member>
		</Type>

		<Type name="assign">
			<Member name="target" type="common:wuid"/>
			<Member name="npc" type="common:wuid"/>
			<Member name="force" type="bool">false</Member>
		</Type>

		<Type name="workplace">
			<Member name="name" type="string"/>
			<!-- assigned NPC; it's used for check if WP is available -->
			<Member name="worker" type="common:wuid"/>
			<Member name="target" type="common:wuid"/>
			<Member name="behavior" type="string"/>
			<Member name="behaviorSource" type="common:wuid"/>
			<Member name="injectedBehavior" type="string"/>
			<Member name="injectedBehaviorSource" type="common:wuid"/>
			<Member name="important" type="bool">false</Member>
			<Member name="instant" type="bool">false</Member>
			<Member name="equipment" type="string"/>
			<Member name="enabled" type="bool">true</Member>
			<Member name="frisk" type="bool">false</Member>
			<!-- 0-1 if param is >= angryness then enable WP  -->
			<Member name="angryness" type="float">-1</Member>
		</Type>

		<Type name="boost">
			<Member name="time" type="int"/>
		</Type>

		<Type name="getAvailableGuard">
			<Member name="id" type="common:wuid"/>
		</Type>

		<Type name="getAssignedGuard">
			<Member name="name" type="string"/>
			<Member name="id" type="common:wuid"/>
		</Type>

		<!-- I/O register NPC and answer with workplace info -->
		<Type name="register">
			<Member name="requestedTarget" type="common:wuid"/>
			<Member name="workplaceIndex" type="int">0</Member>
			<Member name="workplace" type="garrison:workplace"/>
			<Member name="armory" type="garrison:armory"/>
		</Type>

		<!-- NPC -> SA; release workplace -->
		<Type name="unregister">
			<Member name="workplaceIndex" type="int">0</Member>
			<Member name="target" type="common:wuid"/>
		</Type>
	</Type>


	<!--****************************** Weather/Rain ********************************-->

	<Enum name="WeatherType">
		<Normal value="0"/>
		<LightRain value="1"/>
		<Rain value="2"/>
		<Storm value="3"/>
	</Enum>

	<Enum name="RainShelterState">
		<NoRain value="0"/>
		<NotAvailable value="1"/>
		<Sheltered value="2"/>
		<Timeout value="3"/>
	</Enum>

	<Type name="weatherState">
		<Member name="rainIntensity" type="float">0</Member>
		<Member name="type" type="enum:WeatherType">$enum:WeatherType.Normal</Member>
		<!-- enum WeatherType -->
	</Type>

	<Type name="rainShelterParams">
		<Member name="checkTimeChange" type="bool">true</Member>
		<Member name="rainIntensity" type="float">0</Member>
		<Member name="type" type="enum:WeatherType">$enum:WeatherType.Normal</Member>
		<Member name="shelterSearchOrigin" type="common:wuid"/>
		<Member name="shelterSearchDepth" type="int">1</Member>
		<Member name="object" type="common:wuid"/>
		<Member name="behavior" type="string">takeShelter</Member>
		<Member name="state" type="enum:RainShelterState">$enum:RainShelterState.NoRain</Member>
		<Member name="timeout" type="string">-1</Member>
	</Type>

	<!--****************************** Enum  Quest / Objective states********************************-->
	<Enum name="QuestState">
		<Started value="0" />
		<Completed value="1" />
		<Canceled value="2" />
		<Failed value="3" />
		<Reset value="4" />
		<Active value="5" />
	</Enum>

	<Enum name="ObjectiveState">
		<Started value="0" />
		<Completed value="1" />
		<Canceled value="2" />
		<Expired value="3" />
	</Enum>

	<Enum name="ItemsDeliveredState">
		<WrongItems value="-2" />
		<Canceled value="-1" />
		<NoValues value="0" />
		<OkItems value="1" />
		<BrokenItems value="2" />
	</Enum>



	<!--****************************** Enum  Hand********************************-->
	<Enum name="hand">
		<!-- the order is crutial since it represents the code enum also (PickItem node) -->
		<right />
		<left />
	</Enum>


	<!--****************************** Enum NPC State ********************************-->
	<!-- Common Enum for NPC state -->
	<Enum name="NpcState">
		<idling />
		<working />
		<moving />
		<talking />
		<listening />
		<poisoned />
		<running />
		<hiding />
		<following />
		<returning />
	</Enum>

	<!--****************************** Enum Time Types ********************************-->

	<Enum name="TimeType">
		<WorldTime value="0" />
		<GameTime value="1" />
	</Enum>

	<!-- *************************** line combat ******************************** -->

	<Type name="lineCombat">
		<Type name="register">
			<Member name="id" type="common:wuid" />
			<Member name="attacker" type="bool" />
		</Type>
		<Type name="startBattle">
			<Member name="dummy" type="int" />
		</Type>
		<Type name="assignPosition">
			<Member name="position" type="common:vec3" />
			<Member name="direction" type="common:vec3" />
			<Member name="inFront" type="bool" />
		</Type>
		<Type name="assignEnemy">
			<Member name="enemy" type="common:wuid" />
		</Type>
	</Type>

	<Type name="laneCombat">
		<Type name="startBattle">
			<Member name="_" type="int" />
		</Type>
		<Type name="assignPosition">
			<Member name="position" type="common:vec3" />
			<Member name="direction" type="common:vec3" />
			<Member name="inFront" type="bool" />
			<Member name="posId" type="int" />
			<!-- which position (0 to x, from left to right) this NPC occupies/supports -->
		</Type>
		<Type name="assignEnemy">
			<Member name="enemy" type="common:wuid" />
		</Type>
		<Type name="laneReport">
			<Member name="reserveSize" type="int" />
		</Type>
		<Type name="laneRegister">
			<Member name="frontSize" type="int" />
			<Member name="startPoint" type="common:vec3" />
		</Type>
		<Type name="assignLane">
			<Member name="lane" type="common:wuid" />
		</Type>
		<Type name="priority">
			<Member name="wuid" type="common:wuid" />
			<Member name="value" type="float" />
		</Type>
	</Type>

	<!-- ******************** hit subscriptions ******************** -->

	<Type name="hit">

		<Type name="subscription">

			<Type name="subscription">

				<Member name="callback" type="common:wuid" />

			</Type>

			<Type name="request">

				<Member name="subscribe" type="bool">true</Member>
				<Member name="callback" type="common:wuid" />

			</Type>

			<Type name="event">

				<Member name="entity" type="common:wuid" />
				<Member name="attacker" type="common:wuid" />
				<Member name="hitStrength" type="enum:HitReactionStrength" />
				<Member name="hitType" type="enum:HitReactionType" />

			</Type>

		</Type>

	</Type>

	<!-- ******************************* Respawn ******************************* -->
	
	<Type name="respawn">
	
		<Type name="request" />
	
	</Type>
	
	<!-- ******************** Encounter (morale in combat) ********************* -->

	<Type name="encounter">
		<Type name="numCombatants">
			<Member name="numAlliesChange" type="int">0</Member>
			<Member name="numEnemiesChange" type="int">0</Member>
			<Member name="comment" type="string"/>
			<!-- debugging -->
		</Type>
		<Type name="addOpponent">
			<Member name="opponent" type="common:wuid" />
		</Type>
	</Type>

	<!-- Soldier persistence system -->

	<Type name="npcPersistence">
		<Type name="npcState">
			<Member name="health" type="float" />
			<Member name="transform" type="common:transform" />
		</Type>
		<Type name="psObjProp">
			<Member name="saveTransform" type="bool">true</Member>
			<!-- save position when UNLOADING this battle profile-->
			<Member name="hideDead" type="bool">true</Member>
			<!-- hide dead when LOADING this battle profile (otherwise they will be dead at their positions) -->
			<Member name="moveDead" type="bool">true</Member>
			<!-- move corpses when UNLOADING this profile (fresh corpses of soldiers, which died in the battle) -->
		</Type>
	</Type>

	<!-- ******************** External lock persistence ********************* -->
	<Type name="externalLockStatus">
		<Member name="name" type="string" />
		<Member name="lockManagerType" type="enum:LockType">$enum:LockType.Local</Member>
		<Member name="isLocked" type="bool">true</Member>
	</Type>

	<Enum name="LockType">
		<Intellect value="0"/>
		<Local value="1"/>
		<Global value="2"/>
	</Enum>


	<!-- Migrating npcs -->
	<Type name="futureHome">
		<Member name="event" type="string"/>
	</Type>

	<Type name="futureWork">
		<Member name="work" type="string"/>
		<Member name="event" type="string"/>
	</Type>

	<Type name="migrateNpc_params">
		<Member name="npc" type="common:wuid" />

		<Member name="event" type="string"/>

		<Member name="patchPriority" type="int">50</Member>
		<!-- OBSOLETE -->
		<Member name="oldHome_event" type="string"/>
		<!-- OBSOLETE -->
		<Member name="oldWork_event" type="string"/>

		<Member name="migrateHome" type="bool">true</Member>
		<Member name="migrateWork" type="bool">true</Member>
		<Member name="useTeleport" type="bool">false</Member>
		<Member name="immediatePatch" type="bool">false</Member>
	</Type>

	<Type name="migrateNpc_data">
		<Member name="event" type="string"/>
		<Member name="requestHandle" type="string"/>
		<Member name="migrateHome" type="bool">true</Member>
		<Member name="migrateWork" type="bool">true</Member>
		<Member name="useTeleport" type="bool">false</Member>
	</Type>

	<!-- assignNpcsToLocations -->
	<!-- link type -->
	<Type name="assignNpc">
		<Member name="ctx" type="string"/>
		<Member name="gender" type="string"/>
		<Member name="actor" type="string"/>
	</Type>
	<!-- params -->
	<Type name="assignNpcsToLocations_params">
		<Member name="linkTag" type="string" />
		<Member name="locationContext" type="string" />
		<Member name="useTeleportLink" type="bool">false</Member>
		<Member name="batches" type="int">1</Member>
		<Member name="includeActorsInOutput" type="bool">true</Member>
	</Type>

	<!-- ******************** Haste ********************* -->

	<Type name="haste">

		<Type name="instruction">

			<Type name="migrate">

				<Member name="npcName" type="string" />
				<Member name="event" type="string" />
				<Member name="oldHome_event" type="string"/>
				<Member name="oldWork_event" type="string"/>
				<Member name="migrateHome" type="bool" />
				<Member name="migrateWork" type="bool" />
				<Member name="useTeleport" type="bool" />
				<Member name="patchPriority" type="int" />

			</Type>

			<Type name="streamLayerProfile">

				<Member name="profile" type="string" />

			</Type>

			<Type name="teleport">

				<Member name="entity" type="common:wuid" />
			
				<!-- Teleport to entity, unless the name is empty, then use position; -->
				<!-- Entity is referenced by name, so that even unlinked tag points can be used -->
				<Member name="destination_entityName" type="string" />
				<Member name="destination_pos" type="common:vec3" />

			</Type>
			
			<Type name="tree">

				<Member name="xmlFileName" type="string" />
				<Member name="treeName" type="string" />

			</Type>

			<Type name="unstreamLayerProfile">

				<Member name="profile" type="string" />

			</Type>

		</Type>

	</Type>

	<Type name="wuidIntTuple">
		<Member name="wuid" type="common:wuid" />
		<Member name="int" type="int" />
	</Type>

	<Type name="wuidFloatTuple">
		<Member name="wuid" type="common:wuid" />
		<Member name="float" type="float" />
	</Type>

	<!-- ***************** compound work ****************** -->

	<Type name="compoundWork">
        <Member name="behavior" type="string">use</Member>
		<Member name="sourceSelf" type="bool">false</Member> <!-- obsolete in v2 -->
		<Member name="capacity" type="int">1</Member> <!-- obsolete in v2 -->
		<Member name="srcBeh" type="string">use</Member>
		<Member name="justIdle" type="bool">false</Member> <!-- obsolete in v2 -->
        <Member name="priority" type="int">0</Member>
        <Member name="distant" type="bool">false</Member> <!-- Only in v2, uses distanceMove before calling behavior -->
        <Member name="target" type="common:wuid" /> <!-- used only when searching, has no meaning when placed on link -->
	</Type>
	<!-- ****************** dice minigame **************** -->

    <Type name="dice">
        <Type name="end">
            <Member name="reason" type="enum:dice" />
            <!-- 1 - player won, 2 - NPC won, 3 - player forfeited-->
            <Member name="player1Score" type="int" />
            <Member name="player2Score" type="int" />
            <Member name="opponent" type="common:wuid" />
        </Type>
        <Type name="play">
            <Member name="forceDialog" type="bool" />
            <!-- whether the table should force dialog first (where bet is selected)-->
        </Type>
        <Type name="readyToStart">
            <Member name="_" type="string"/>
        </Type>
        <Type name="start">
        </Type>
        <Type name="onTurnEnded">
            <Member name="score" type="int" />
            <Member name="unusedDice" type="int" />
        </Type>
        <Type name="onBust">
            <Member name="score" type="int" />
        </Type>
        <Type name="optionalParams">
            <Member name="forcedTopicAlias" type="string" />
        </Type>
        <Type name="cancelled">
            <Member name="_" type="bool" />
        </Type>
    </Type>


	<!--****************************** Sleepover ********************************-->

	<Enum name="sleepoverEventKind">

		<tempRentPurchased />
		<permanentRentPurchased />
		<tempRentExpired />

	</Enum>

	<Enum name="sleepoverRentState">

		<none />
		<temp />
		<permanent />

	</Enum>

	<Type name="sleepover">

		<Type name="event">

			<Member name="kind" type="enum:sleepoverEventKind" />

		</Type>

	</Type>

	<!--****************************** World stashes ********************************-->

	<Enum name="worldStashKind">

		<none />
		<confiscatedItems />
		<lostQuestibleItems />

	</Enum>

	<Type name="worldStashes">

		<Type name="worldStash">

			<Member name="kind" type="enum:worldStashKind" />

		</Type>

	</Type>

	<!--****************************** Attention ********************************-->

	<Enum name="attentionMode">

		<unknown />
		<wuid />
		<position />
		<clear />

	</Enum>

	<Type name="attention">

		<Type name="request">

			<Member name="mode" type="enum:attentionMode" />

			<!-- Valid when mode is 'wuid' / 'position', resp. -->
			<Member name="targetWuid" type="common:wuid" />
			<Member name="targetPosition" type="common:vec3" />

			<Member name="duration" type="string" />
			<Member name="durationVariation" type="string">0</Member>

		</Type>

	</Type>
	
	<!-- ************************* Custom death ***************************** -->
	
	<Type name="customDeath">
	
		<Type name="data">
		
			<Member name="smartObject" type="common:wuid" />		
			<Member name="deathAnimation_fragment" type="string" />
			<Member name="deathAnimation_tags" type="string" />
		
		</Type>
	
	</Type>

	<!--****************************** Death ********************************-->

	<Enum name="deathState">

		<none />
		<died />
		<disappeared />

	</Enum>

	<!--****************************** Enum dice ********************************-->

	<Enum name="dice">
		<playerWon value="1" />
		<npcWon value="2"/>
		<playerForfeited value="3" />
	</Enum>

	<!--****************************** Trainers ********************************-->

	<Type name="trainers">

		<Type name="faderRequest">

			<Member name="_" type="bool" />

		</Type>

	</Type>
	
	<!-- **************************** preventCombatWithDude *************************** -->
	
	<Enum name="playerPreventCombatReason">
	
		<none />
		<confrontation />
		<cutscene />
		<jail />
		<combatTutorial />
	
	</Enum>

	<!-- **************************** Random Events*************************** -->
	<Enum name="wandererIdleActivity">
		<idle />
		<sit />
		<lean />
		<customAnimation />
	</Enum>
	
	<Type name="disableRandomEvents">
		<Type name="params">
			<Member name="applicant" type="common:wuid" />
		</Type>
	</Type>

	<Type name="randomEvent">

		<Type name="wanderEvent">
			<Member name="name" type="string" />
			<Member name="idleActivity" type="enum:wandererIdleActivity" />
			<Member name="animation" type="string" />
			<Member name="fragment" type="string" />
			<Member name="approach" type="float" />
			<Member name="attentionMonolog" type="string" />
			<Member name="farewellMonolog" type="string" />
			<Member name="forceDialog" type="string" />
			<Member name="spawnItem" type="string" />
			<Member name="spawnCorpse" type="string" />
			<Member name="itemClose" type="bool" />
			<Member name="soul" type="string" />
			<Member name="corpse" type="string" />
            <Member name="combatFromFader" type="bool" />
		</Type>

	</Type>

	<!-- slot system -->

	<Type name="slotChangeState">
		<Member name="enable" type="bool" />
		<Member name="debugMsg" type="string" />
	</Type>


	<!-- Hobbies -->
	<Enum name="gender">
		<both /> <!-- RENAME to undefined -->
		<male />
		<female />
	</Enum>

	<Type name="restSpot">
		<Member name="exterier" type="bool">true</Member>
		<Member name="gender" type="enum:gender">$enum:gender.both</Member>
	</Type>

	<!-- -->
	<Enum name="gatherExtras_mode">
		<continuous />
		<batch />
	</Enum>

	<Type name="gatherExtras">
		<!-- params for the includeTree -->
		<Type name="params">
			<Member name="area" type="common:wuid" />
			<Member name="name" type="string" />
			<Member name="predicate" type="callback" />

			<!-- criteria -->
			<Member name="mode" type="enum:gatherExtras_mode">$enum:gatherExtras_mode.batch</Member>
			<Member name="count" type="int" />

			<!-- only for continuos mode -->
			<Member name="handleNPC_continuous" type="callback" />
		</Type>

		<!-- request from the user to the gather area -->
		<Type name="request">
			<Member name="create" type="bool">true</Member>

			<Member name="listener" type="common:wuid" />
			<Member name="name" type="string" />
			<Member name="predicate" type="callback" />
		</Type>

		<!-- area calls the npcs, which starts communicating with the user -->
		<Type name="call">
			<!-- listener is not used in the link form -->
			<Member name="listener" type="common:wuid" />

			<!-- other data is used in same way (message and on a link) -->
			<Member name="name" type="string" />
			<Member name="predicate" type="callback" />


			<!-- member used in the message from the user directly to the npc to release the gather -->
			<Member name="create" type="bool">true</Member>
		</Type>

		<!-- message from the npc to the user -->
		<Type name="npcResponce">
			<Member name="npc" type="common:wuid" />
		</Type>

	</Type>

	<Type name="horsetraders">
	
		<Type name="deal">
		
			<Member name="boughtHorse" type="common:wuid" />
			
			<!-- null: No hourse sold in return -->
			<Member name="soldHorse" type="common:wuid" />
			
			<!-- Whether to despawn the sold horse -->
			<Member name="despawnSoldHorse" type="bool" />
		
		</Type>
	
	</Type>
	
	<!--****************************** NEXTBEHAVIOR ***********************************-->
	
	<!--****************************** NEXTBEHAVIOR ***********************************-->

	<Type name="nextBehavior">
		<Member name="id" type="common:wuid" />
		<Member name="name" type="string" />

		<Member name="duration" type="string" />
		<Member name="variation" type="string">0s</Member>
		<Member name="timeType" type="string">GameTime</Member>

		<Member name="useEditorValues" type="bool">false</Member>

		<Member name="skipDefault" type="bool">false</Member>

		<Member name="persistent" type="bool">false</Member>
	</Type>

	<!--****************************** QUEUE PARAMS  ***********************************-->

	<Type name="queue_params">
		<Member name="actionBehavior" type="callback" />
		<Member name="waitingBehavior" type="callback" />
        <Member name="savePhase" type="bool" >true</Member> <!-- if true, actionBehavior is executed once in save/load. if false, it is executed always after load -->
	</Type>

	<!-- ******************** Settings for common workplace template ******************** -->

	<Type name="workplace_params">
		<Member name="useCategories" type="string" />
		<Member name="cleanCategories" type="string" />
		<Member name="minWorkCyclesBeforeBreak" type="int">0</Member>
		<Member name="breakChance" type="float">0.333</Member>
		<Member name="breakDuration" type="string">20s</Member>
		<Member name="breakVariation" type="string">40s</Member>
	</Type>


	<!-- ******************** Settings for smart object templates ******************** -->

	<Type name="object_params">
		<Member name="animationIn" type="string" />
        <Member name="animationInTag" type="string" />
		<Member name="animation" type="string" />
        <Member name="animationTag" type="string" />
		<Member name="animationOut" type="string" />
        <Member name="animationOutTag" type="string" />

		<Member name="slavedObjectCategory" type="string" />

		<Member name="behaviorName" type="string" />

		<Member name="helperName" type="string" />

		<Member name="dontMove" type="bool">false</Member>

		<Member name="skipOutAnimation" type="bool">false</Member>

		<Type name="withTool">
			<Member name="slotClassId" type="string" />
			<Member name="attachEventName" type="string">Attach</Member>
			<Member name="detachEventName" type="string">Detach</Member>

			<Member name="second_slotClassId" type="string" />
			<Member name="second_attachEventName" type="string">SecondAttach</Member>
			<Member name="second_detachEventName" type="string">SecondDetach</Member>
		</Type>
	</Type>


	<!-- ******************** Used by objectNewHelpers template - indicates what to do when the behavior is being halted ******************** -->
	
	<Enum name="fastOutType">
		<!--  -->
		<makeMeIdle />
		<!--  -->
		<instant />
		<!--  -->
		<animation />
		<!--  -->
		<stop />
	</Enum>
	
	
	<!-- ******************** Used by objectNewHelpers template - allows the template to correctly set up only intended dialog parameters for NPC ******************** -->
	
	<Type name="dialogParametersOverride">
		<Member name="override_defaultAnimState" type="bool">false</Member>
		<Member name="override_animFragment" type="bool">false</Member>
		<Member name="override_animTag" type="bool">false</Member>
		<Member name="override_noTurnBody" type="bool">false</Member>
		<Member name="override_noInterrupt" type="bool">false</Member>
		<Member name="override_useTwinsAsReceiver" type="bool">false</Member>
	</Type>
	
	
	<!-- ******************** Used by objectNewHelpers template - specifies type for animation event catch ******************** -->
	
	<Enum name="animationEventType">
		<!--  -->
		<slot_pick />
		<slot_place />
		<!--  -->
		<object_attach />
		<object_detach />
		<!--  -->
		<item_toHand />
		<item_toInventory />
	</Enum>
	
	
	<!-- ******************** Used by objectNewHelpers template - packs variables needed inside animation event catches ******************** -->
	
	<Type name="animationEvent">
		<Member name="name" type="string" />
		<Member name="type" type="enum:animationEventType" />
		<Member name="rightHand" type="bool" />
		<Member name="skipIfInstant" type="bool">false</Member>
		
		<Member name="targetId" type="common:wuid" />
	</Type>
	
	
	<!-- ******************** Settings for smart object templates using the new helper system ******************** -->

	<Type name="objectNewHelpers_params">
		<Member name="behaviorName" type="string" />

		<!-- How the behavior should close in the case of fast halting -->
		<Member name="fastOutType" type="enum:fastOutType">$enum:fastOutType.makeMeIdle</Member>

		<Member name="animationIn" type="string" />
        <Member name="animationInTags" type="string" />

		<Member name="animationLoop" type="string" />
        <Member name="animationLoopTags" type="string" />

		<Member name="animationOut" type="string" />
        <Member name="animationOutTags" type="string" />
		
		<Member name="fastOutAnimation" type="string" />
		<Member name="fastOutAnimationTags" type="string" />

		<!-- !!! DON'T USE THIS OPTION !!! There is an unresolved issue with starting doNextBehavior when the behavior starts in LOD, also currently because of LOD areas and trashing, this probably shouldn't be used anyway -->
		<Member name="completeLODGuarding" type="bool">false</Member>
		
		<Member name="clearHandsOnStart" type="bool">false</Member>
		<Member name="clearHandsBeforeFastOut" type="bool">false</Member>
		<Member name="suppressUsingLight" type="bool">true</Member>
		
		<Member name="dialogParametersOverride" type="dialogParametersOverride" />
		<Member name="restrictDialogDuringInOut" type="bool">false</Member>
		
		<Member name="idleStateTag" type="string" />
		
		<Member name="saveAfterAnimation" type="bool">false</Member>
		
		<Member name="helperName" type="string" />
		
		<Member name="dontMove" type="bool">false</Member>
		
		<Member name="instantIn" type="bool">false</Member>
		
		<Member name="inDenyStopEvent" type="string" />
		<Member name="outDenyStopEvent" type="string" />
		
		<Member name="loopIncludedTreeFile" type="string" />
		<Member name="loopIncludedTreeName" type="string" />

		<!-- Optional tools / objects / items settings -->
		<Member name="slot_right_itemClassId" type="string" />
		<Member name="slot_left_itemClassId" type="string" />
		
		<Member name="object_right_id" type="common:wuid" />
		<Member name="object_left_id" type="common:wuid" />
		
		<Member name="item_right_guid" type="string" />
		<Member name="item_left_guid" type="string" />
		
		<Member name="in_animationEvent_1" type="animationEvent" />
		<Member name="in_animationEvent_2" type="animationEvent" />
		
		<Member name="loop_animationEvent_1" type="animationEvent" />
		<Member name="loop_animationEvent_2" type="animationEvent" />
		
		<Member name="out_animationEvent_1" type="animationEvent" />
		<Member name="out_animationEvent_2" type="animationEvent" />
		<Member name="out_animationEvent_3" type="animationEvent" />

		<Member name="slavedObjectCategory" type="string" />
		
		<Member name="loopRunning" type="bool" />
	</Type>

	
	<!--****************************** STREAMING INIT PHASES  ***********************************-->

	<Enum name="streamedInitPhase">
		<pending />
		<!-- Streaming not started yet -->
		<loading />
		<!-- EnableProfile called -->
		<init />
		<!-- ProfileLoadedGate responded -->
		<done />
		<!-- All set up -->
	</Enum>

	<!--****************************** NPC state related types  ***********************************-->

	<Type name="guardStateChange">
		<Member name="newState" type="bool" />
		<Member name="npc" type="common:wuid" />
	</Type>

	<Type name="npcDeathForward">
		<Member name="npc" type="common:wuid" />
	</Type>

	<Type name="npcActionNotification">
		<Member name="context" type="string" />
		<Member name="action" type="string" />
	</Type>

	<!--****************************** Redirect behavior link ***********************************-->

	<Enum name="redirectedSABehaviorId">
		<undefined value="0" />
		<breakfastEater />
		<eater />
	</Enum>

	<Type name="redirectBehavior">
		<Member name="behavior" type="string" />
	</Type>

	<Type name="redirectBehavior_params">
		<Member name="sourceBehaviorId" type="enum:redirectedSABehaviorId" />
	</Type>

	<!--****************************** Load all references ***********************************-->
	<!-- var name: t_loadAllReferences_params-->
	<!-- var type: loadAllReferences:params-->
	<Type name="loadAllReferences">
		<Type name="params">
			<Member name="origin" type="common:wuid" />
		</Type>
	</Type>


	<!--****************************** Bathhouse services ***********************************-->
	<Type name="bathhouseServiceOrdered">
		<!--
			Bathhouse service IDs:
			1 - Wash and clean
			2 - Cure
			3 - Cure + wash
			4 - Hire a prostitute = luxury package (wash + cure + temp charisma buff)
		-->
		<Member name="serviceId" type="int" />
		<Member name="price" type="int" /><!-- In decigroshes -->
	</Type>

	<!--****************************** Formation holder  ************************************-->
	<!-- varible for sending info to formation holder -->
	<Type name="formationHolder">
		<Member name="command" type="enum:formationHolderCommand">$enum:initFormation</Member>
		<Member name="formationName" type="string" />
	</Type>

	<Enum name="formationHolderCommand">
		<initFormation />
		<!-- init with default formation -->
		<createFormation />
		<!-- create set formation -->
		<endFormation />
		<!-- end current formation -->
		<resetFormation />
		<!-- end current and create it again. Will -->
	</Enum>


	<!-- ******************** For activating / deactivating triggers (default value is supposed to set the trigger according to the current conditions) ******************** -->

	<Enum name="triggerAvailability">
		<default />
		<available />
		<unavailable />
	</Enum>
	
	
	<!-- ******************** Carries the path settings for inspection walk ******************** -->
	
	<Type name="inspectionWalk_linkData">
		<Member name="pathId" type="string" />
	</Type>

	<!-- Encapsulate individual calls of stimulusReactionOverride for player as a questUtils functionality -->
	<Type name="overridePlayerActionReaction">
		<Type name="params">
			<Member name="reactTo_aim" type="bool">false</Member>
			<Member name="reactTo_alert" type="bool">false</Member>
			<!--
			<Member name="reactTo_carriedCorpse" type="bool">false</Member>
			-->
			<Member name="reactTo_hit" type="bool">false</Member>
			<Member name="reactTo_hostilePerception" type="bool">false</Member>
			<!--
			<Member name="reactTo_lockpick" type="bool">false</Member>
			<Member name="reactTo_shotSeen" type="bool">false</Member>
			<Member name="reactTo_trespass" type="bool">false</Member>
			<Member name="reactTo_sneak" type="bool">false</Member>
			<Member name="reactTo_weapon" type="bool">false</Member>
			-->

			<Member name="npc" type="common:wuid" />
			<Member name="handle" type="string" />
			<Member name="override" type="combat:stimulus:customBehaviorRequest" />
		</Type>
	</Type>
	
	<Enum name="race">
		<undefined value="0" />
		<human />
		<horse />
		<dog />
		<hare />
	</Enum>
	
	
	<Type name="soul">
	
		<Member name="entityClass" type="string" />
		<Member name="gender" type="enum:humanGender" />
		<Member name="factionId" type="int" />
		<Member name="socialClass" type="string" />
		<Member name="crimeSystemRole" type="enum:crimeSystemRole" />
		<Member name="caste" type="enum:caste" />
		<Member name="race" type="enum:race" />
		
	</Type>
	
	<!-- ******************** Pursuit ******************** -->
	
	<Enum name="chaseState">
	
		<none />
		
		<!-- Target is our perception focus -->
		<lockedOn />
		
		<!-- Target was, but is not our perception focus, timeout is running to switch into lockedOut -->
		<lockingOut />
		
		<!-- Target is not our perception focus for some time -->
		<lockedOut />
		
		<!-- Target was not, but is our perception focus, timeout is running to switch into lockedIn -->
		<lockingOn />
		
		<!-- Given up -->
		<givenUp />
		
		<!-- Success -->
		<success />
	
	</Enum>
	
	<Type name="pursuit">
	
		<Type name="params">
		
			<!-- Distance from player at which the tree succeeds; <= 0: never -->
			<Member name="distance" type="float">2</Member>
			
			<!-- For how long to continue the pursuit even after we lost the player [seconds] -->
			<Member name="lockedOutTimeoutToGiveUp" type="int">20</Member>
			
			<!-- See above: Additional timeout variation [seconds] -->
			<Member name="lockedOutTimeoutToGiveUp_variation" type="string">10</Member>
			
		</Type>
	
	</Type>
	
	<!-- ******************** Specifies variant of the event chase ******************** -->
	
	<Enum name="event_chase_type">
		<undefined value="0" />
		<manChasingThief />
	</Enum>
	
	
	<!-- ******************** Controlling flow in event chase trees ******************** -->

	<Enum name="event_chase_state">
		<undefined value="0" />
		<fleeingFromNPC />
		<fleeingFromPlayer />
		<gotCaughtByNPC />
		<gotCaughtByPlayer />
		<fleeingNPCDied />
		<chasingNPCDied />
		<chasingNPCAttacksPlayer />
		<resolutionDialog />
		<finished />
		<beggingForMercy />
	</Enum>
	
	
	<!-- ******************** Marking the event chase stolen item variant ******************** -->
	
	<Enum name="event_chase_stolenItem">
		<undefined value="0" />
		<bread />
		<ring />
		<fabric />
		<money />
	</Enum>
	
	
	<!-- ******************** For message requests, notifications, and other stuff in event chase ******************** -->
	
	<Type name="event_chase">
		<Type name="state_request" />
		<Type name="stolenItem_request" />

		<Type name="fleeingNPCReleased">
			<Member name="itemConfiscated" type="bool" />
		</Type>

		<Type name="stolenItemRecord">
			<Member name="stolenItem" type="enum:event_chase_stolenItem" />
			<Member name="guid" type="string" />
			<Member name="amount" type="int">1</Member>
		</Type>
	</Type>
	
    <!-- TOOL SYSTEM -->
    
    <Type name="tool_user">
        <Member name="user" type="common:wuid" />
    </Type>
	
	
	<!-- ******************** For mailbox generalRequest, which uses blank request to handle simple things, typically within scope of one tree ******************** -->
	
	<Type name="generalRequest" />
	
	
	<!-- ******************** For mailbox genericRequest, which uses blank request to handle simple things, typically within scope of one tree ******************** -->
	
	<Type name="genericRequest" />
	
	<!-- ... -->
	
	<!-- Testovaci Jarda -->
	<Enum name="testJarda">
		<walk />
		<trespass />
		<reportWeapon />
		<reportCorpse />
	</Enum>
	
	
	<Enum name="disableSaveReason">
		<generic />
		<script />
		<minigame />
		<battle />
		<combat />
	</Enum>
	
	
	<Enum name="interiorType">
		<undefined />
		<home />
		<stash />
		<shop />
	</Enum>
	
	<Type name="lockShopDoors">
		<Type name="params">
			<Member name="lock" type="bool">true</Member>
			<Member name="shopArea" type="common:wuid" />
		</Type>
	</Type>

	
	<!-- ********************  ******************** -->
	
	<Type name="chestInnerBehavior_event">
		<Member name="callback" type="callback" />
		<Member name="eventName" type="string" />
	</Type>
	
	<Type name="chestInnerBehavior_params">
		<Member name="inChestEvent" type="chestInnerBehavior_event" />
		<Member name="inPocketEvent" type="chestInnerBehavior_event" />
	</Type>
	
	<Type name="patchLink">
		<Member name="version" type="enum:gameVersion">$enum:gameVersion.Invalid</Member>
	</Type>
	
	
	
</TypeDefinitions>
